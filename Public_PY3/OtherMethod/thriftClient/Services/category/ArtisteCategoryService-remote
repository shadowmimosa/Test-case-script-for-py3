#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#
#_*_ coding:utf-8 _*_

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from Services.category import ArtisteCategoryService
from Services.category.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  ResArtistNOrderMsg getArtistByStarIdol(STARLEVELTYPE sType)')
  print('  ResArtistLiveVOMsg getArtistDetailByUserIds( userIdList)')
  print('  ResArtistNOrderMsg getArtistBySignFlag()')
  print('  ResArtistNOrderMsg getArtistByFxExclude()')
  print('  ResArtistNOrderMsg getArtistByTwArea()')
  print('  ResArtistNOrderMsg getArtistByShowStyle(SHOWSTYLE sType)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ArtisteCategoryService.Client(protocol)
transport.open()

if cmd == 'getArtistByStarIdol':
  if len(args) != 1:
    print('getArtistByStarIdol requires 1 args')
    sys.exit(1)
  pp.pprint(client.getArtistByStarIdol(eval(args[0]),))

elif cmd == 'getArtistDetailByUserIds':
  if len(args) != 1:
    print('getArtistDetailByUserIds requires 1 args')
    sys.exit(1)
  pp.pprint(client.getArtistDetailByUserIds(eval(args[0]),))

elif cmd == 'getArtistBySignFlag':
  if len(args) != 0:
    print('getArtistBySignFlag requires 0 args')
    sys.exit(1)
  pp.pprint(client.getArtistBySignFlag())

elif cmd == 'getArtistByFxExclude':
  if len(args) != 0:
    print('getArtistByFxExclude requires 0 args')
    sys.exit(1)
  pp.pprint(client.getArtistByFxExclude())

elif cmd == 'getArtistByTwArea':
  if len(args) != 0:
    print('getArtistByTwArea requires 0 args')
    sys.exit(1)
  pp.pprint(client.getArtistByTwArea())

elif cmd == 'getArtistByShowStyle':
  if len(args) != 1:
    print('getArtistByShowStyle requires 1 args')
    sys.exit(1)
  pp.pprint(client.getArtistByShowStyle(eval(args[0]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
