#_*_ coding:utf-8 _*_
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import Services.live_dubbo.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class STARLEVELTYPE:
  STAR_1 = 1
  STAR_2 = 2
  STAR_3 = 3
  STAR_4 = 4

  _VALUES_TO_NAMES = {
    1: "STAR_1",
    2: "STAR_2",
    3: "STAR_3",
    4: "STAR_4",
  }

  _NAMES_TO_VALUES = {
    "STAR_1": 1,
    "STAR_2": 2,
    "STAR_3": 3,
    "STAR_4": 4,
  }

class SHOWSTYLE:
  STYLE_1 = 1
  STYLE_2 = 2
  STYLE_3 = 3
  STYLE_4 = 4
  STYLE_5 = 5
  STYLE_6 = 6
  STYLE_7 = 7
  STYLE_8 = 8

  _VALUES_TO_NAMES = {
    1: "STYLE_1",
    2: "STYLE_2",
    3: "STYLE_3",
    4: "STYLE_4",
    5: "STYLE_5",
    6: "STYLE_6",
    7: "STYLE_7",
    8: "STYLE_8",
  }

  _NAMES_TO_VALUES = {
    "STYLE_1": 1,
    "STYLE_2": 2,
    "STYLE_3": 3,
    "STYLE_4": 4,
    "STYLE_5": 5,
    "STYLE_6": 6,
    "STYLE_7": 7,
    "STYLE_8": 8,
  }


class ArtistNOrder:
  """
  Attributes:
   - userId
   - viewerNum
   - starLevel
   - starNum
   - giftNum
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userId', None, None, ), # 1
    (2, TType.I32, 'viewerNum', None, None, ), # 2
    (3, TType.I32, 'starLevel', None, None, ), # 3
    (4, TType.I32, 'starNum', None, None, ), # 4
    (5, TType.I32, 'giftNum', None, None, ), # 5
    (6, TType.I32, 'status', None, None, ), # 6
  )

  def __init__(self, userId=None, viewerNum=None, starLevel=None, starNum=None, giftNum=None, status=None,):
    self.userId = userId
    self.viewerNum = viewerNum
    self.starLevel = starLevel
    self.starNum = starNum
    self.giftNum = giftNum
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.viewerNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.starLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.starNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.giftNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ArtistNOrder')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I64, 1)
      oprot.writeI64(self.userId)
      oprot.writeFieldEnd()
    if self.viewerNum is not None:
      oprot.writeFieldBegin('viewerNum', TType.I32, 2)
      oprot.writeI32(self.viewerNum)
      oprot.writeFieldEnd()
    if self.starLevel is not None:
      oprot.writeFieldBegin('starLevel', TType.I32, 3)
      oprot.writeI32(self.starLevel)
      oprot.writeFieldEnd()
    if self.starNum is not None:
      oprot.writeFieldBegin('starNum', TType.I32, 4)
      oprot.writeI32(self.starNum)
      oprot.writeFieldEnd()
    if self.giftNum is not None:
      oprot.writeFieldBegin('giftNum', TType.I32, 5)
      oprot.writeI32(self.giftNum)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 6)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.viewerNum)
    value = (value * 31) ^ hash(self.starLevel)
    value = (value * 31) ^ hash(self.starNum)
    value = (value * 31) ^ hash(self.giftNum)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResArtistNOrderMsg:
  """
  接口响应消息体
  分类主播主播ID列表


  Attributes:
   - responseCode
   - responseDesp
   - body
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'responseCode', None, None, ), # 1
    (2, TType.STRING, 'responseDesp', None, None, ), # 2
    (3, TType.LIST, 'body', (TType.STRUCT,(ArtistNOrder, ArtistNOrder.thrift_spec)), None, ), # 3
  )

  def __init__(self, responseCode=None, responseDesp=None, body=None,):
    self.responseCode = responseCode
    self.responseDesp = responseDesp
    self.body = body

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.responseCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.responseDesp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.body = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ArtistNOrder()
            _elem5.read(iprot)
            self.body.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResArtistNOrderMsg')
    if self.responseCode is not None:
      oprot.writeFieldBegin('responseCode', TType.I32, 1)
      oprot.writeI32(self.responseCode)
      oprot.writeFieldEnd()
    if self.responseDesp is not None:
      oprot.writeFieldBegin('responseDesp', TType.STRING, 2)
      oprot.writeString(self.responseDesp)
      oprot.writeFieldEnd()
    if self.body is not None:
      oprot.writeFieldBegin('body', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.body))
      for iter6 in self.body:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.responseCode)
    value = (value * 31) ^ hash(self.responseDesp)
    value = (value * 31) ^ hash(self.body)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResArtistLiveVOMsg:
  """
  接口响应消息体
  主播详情


  Attributes:
   - responseCode
   - responseDesp
   - body
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'responseCode', None, None, ), # 1
    (2, TType.STRING, 'responseDesp', None, None, ), # 2
    (3, TType.LIST, 'body', (TType.STRUCT,(Services.live_dubbo.ttypes.LiveVO, Services.live_dubbo.ttypes.LiveVO.thrift_spec)), None, ), # 3
  )

  def __init__(self, responseCode=None, responseDesp=None, body=None,):
    self.responseCode = responseCode
    self.responseDesp = responseDesp
    self.body = body

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.responseCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.responseDesp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.body = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = Services.live_dubbo.ttypes.LiveVO()
            _elem12.read(iprot)
            self.body.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResArtistLiveVOMsg')
    if self.responseCode is not None:
      oprot.writeFieldBegin('responseCode', TType.I32, 1)
      oprot.writeI32(self.responseCode)
      oprot.writeFieldEnd()
    if self.responseDesp is not None:
      oprot.writeFieldBegin('responseDesp', TType.STRING, 2)
      oprot.writeString(self.responseDesp)
      oprot.writeFieldEnd()
    if self.body is not None:
      oprot.writeFieldBegin('body', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.body))
      for iter13 in self.body:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.responseCode)
    value = (value * 31) ^ hash(self.responseDesp)
    value = (value * 31) ^ hash(self.body)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
