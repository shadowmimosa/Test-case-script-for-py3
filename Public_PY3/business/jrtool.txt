*** Settings ***
Library           ../Lib/tool_reptile.py
Library           ../Lib/tools_library.py
Resource          ../Public/http_request.txt
Resource          thejoyrun.txt

*** Variables ***
${Goltimestamp}    0
${null}    ${EMPTY}


*** Keywords ***
null
    [Arguments]    ${nullstr}=None
    [Documentation]   处理java的null字符串
	Return   0

Gettimes
    [Arguments]    ${fields}
    [Documentation]    根据入参和当前时间输出处理后的相应时间格式，times输出时间戳格式；yy以年运算，MM以月运算，dd以天运算，hh以时运算，mm以分运算，ss以秒运算；ctime输出Wed Mar 21 10:36:38 2018 格式的时间； 第1、2个参数为时间运算粒度，第3个参数为输出格式,参数与参数之间用英文逗号隔开；例如：dd,+5,times 为输出当前时间的5天后的时间戳，注意：以月运算和以年运算分别是以30天和365天进行运算；
    log    Gettimes Start ......
    log    入参为：${fields}
    @{fieldslist}    Split String    ${fields}    ,
    ${fieldfiler}    Get From List    ${fieldslist}    0
    ${fieldnum}    Get From List    ${fieldslist}    1
    ${returnfield}    Get From List    ${fieldslist}    2
    ${localtime}=    Get Time    epoch
    ${localtimes}    Evaluate    int(${localtime})
    ${localctime}    Evaluate    time.ctime(${localtimes})    time,datetime
    ${lyy}    ${lmm}    ${ldd}    ${lhour}    ${lmin}    ${lsec}    Get Time
    ...    year,month,day,hour,min,sec
    ${times}    Run Keyword If    '${fieldfiler}'=='yy'    Evaluate    ${localtimes}+${fieldnum}*3600*24*365
    ...    ELSE IF    '${fieldfiler}'=='MM'    Evaluate    ${localtimes}+${fieldnum}*3600*24*30
    ...    ELSE IF    '${fieldfiler}'=='dd'    Evaluate    ${localtimes}+${fieldnum}*3600*24
    ...    ELSE IF    '${fieldfiler}'=='hh'    Evaluate    ${localtimes}+${fieldnum}*3600
    ...    ELSE IF    '${fieldfiler}'=='mm'    Evaluate    ${localtimes}+${fieldnum}*60
    ...    ELSE IF    '${fieldfiler}'=='ss'    Evaluate    ${localtimes}+${fieldnum}
    ...    ELSE    set variable    ${localtimes}
    ${ctime}    Evaluate    time.ctime(${times})    time,datetime
    ${retime}    Run Keyword If    '${returnfield}'=='ctime'    set variable    ${ctime}
    ...    ELSE    set variable    ${times}
    log    本地时间：${localctime}===${localtimes}，处理后的时间：${ctime}=====${times}
    log    Gettimes End ......
    [Return]    ${retime}

Gettimel	
    [Arguments]    ${fields}=None
	${timel}    Evaluate      long(str(time.time())[0:10])    time,string
	[Return]    ${timel}
	
	
Removesting
    [Arguments]    ${srcstring}    ${movestr}    ${spitsting}
    [Documentation]    从源字符串中删除某些字符串，如：123,abc,1234,444,eee 中删除abc,eee 两个字符串的分割符需要一致，${srcstring} 源字符串，${movestr}为需要删除的字符串， ${spitsting} 为两个字符串的分割符；
    log    Removesting Start ......
    log    原字符串${srcstring}
    log    需要移除${movestr}
    log    分割符${spitsting}
    @{moveList}    Split String    ${movestr}    ${spitsting}
    ${movestrlen}    evaluate    len(${moveList})
    : FOR    ${movesting}    IN    @{moveList}
    \    ${srcstring}    replace string    ${srcstring}    ${spitsting}${spitsting}    ${spitsting}
    \    ${srcstring}=    Remove String    ${srcstring}    ${movesting}${spitsting}
    \    ${srcstring}=    Remove String    ${srcstring}    ${spitsting}${movesting}
    \    ${srcstring}=    Remove String    ${srcstring}    ${movesting}
    \    ${srcstring}    replace string    ${srcstring}    ${spitsting}${spitsting}    ${spitsting}
    ${restr}    Run Keyword If    '${srcstring}'=='${spitsting}'    set variable    ${EMPTY}
    ...    ELSE    set variable    ${srcstring}
    log    Removesting End ......
    [Return]    ${restr}

FilterList
    [Arguments]    ${SrcListstr}    ${filters}    ${Returnfield}    ${Onlyone}=None    ${Num}=None
    [Documentation]    *筛选并分隔字符串*
    ...    支持1-3个条件的筛选记录,有则返回value1,value2,...,否则返回0；
    ...    SrcListstr 为源字符串(需要符合[{"a":1,"b":2,"c":3},{"a":12,"b":22,"c":33},{"a":11,"b":12,"c":13,"d":13}])；
    ...    filters为筛选条件：格式为field1,1,2/field2,3,4(筛选字符与值之间用逗号分隔，筛选字段之间用/分隔);
    ...    Returnfield为返回值串的字符,为All返回所有字段；
    ...    Onlyone以哪个字段或字符串来分隔，默认为空；
    ...    Num源数据列表的条数筛选，默认为空筛选倒数10条； 大于0的数时筛选前Num列【0:Num】,小于0的数时筛选倒数Num列【Num:Last】
    ...    例如从源字符串[{"fid":123,"uid": 2315,"meter1": 2315},{"fid":2123,"uid": 23151,"meter1": 22315},{"fid":1423,"uid": 23152,"meter1": 2315,"meter2": 23415},{"fid":2123,"uid": 24315,"meter1": 23415}] 中对fid、uid、meter1、meter2条件筛选符合的记录
    [Timeout]    1 minute
    log    FilterList Start ......
    log    原字符串:${SrcListstr}
    log    筛选条件:${filters}
    log    返回值串的字段:${Returnfield}
    log    分隔串的字段:${Onlyone}
    log    源数据列表的条数筛选${Num}
    @{filterList}    Split String    ${filters}    /
    ${filterLen}    BuiltIn.Get Length    ${filterList}
    ${filterstr1}    Get From List    ${filterList}    0
    ${filterstr2}    Run Keyword If    ${filterLen}>1    Get From List    ${filterList}    1
    ...    ELSE    Get From List    ${filterList}    0
    ${filterstr3}    Run Keyword If    ${filterLen}>2    Get From List    ${filterList}    2
    ...    ELSE    Get From List    ${filterList}    0
    @{filterstrList1}    Split String    ${filterstr1}    ,
    @{filterstrList2}    Split String    ${filterstr2}    ,
    @{filterstrList3}    Split String    ${filterstr3}    ,
    ${filterfield1}    Get From List    ${filterstrList1}    0
    ${filterfield2}    Get From List    ${filterstrList2}    0
    ${filterfield3}    Get From List    ${filterstrList3}    0
    ${filterfield1min}    Get From List    ${filterstrList1}    1
    ${filterfield2min}    Get From List    ${filterstrList2}    1
    ${filterfield3min}    Get From List    ${filterstrList3}    1
    ${filterfield1max}    Get From List    ${filterstrList1}    2
    ${filterfield2max}    Get From List    ${filterstrList2}    2
    ${filterfield3max}    Get From List    ${filterstrList3}    2
    ##以下处理兼容Java中返回null的情况，在 python3 改为替换 None
	${SrcListstr}    replace string    ${SrcListstr}    :None,    :-1,
	${SrcListstr}    replace string    ${SrcListstr}    :None}    :-1}
	${SrcListstr}    replace string    ${SrcListstr}    : None,    :-1,
	${SrcListstr}    replace string    ${SrcListstr}    : None}    :-1}
	##将源字符串转换为列表list
    # ${SrcList}    stringtolist       ${SrcListstr}
	${SrcList}  evaluate   ${SrcListstr}
	# ${SrcList}  To List   ${SrcListstr} 
	${sllen_src}   BuiltIn.Get Length    ${SrcList}
	##以下处理处理空返回的问题
	@{rList}   Create List   0
	Run Keyword If    ${sllen_src} == ${0} and '${Returnfield}'=='All'    Return From Keyword   @{rList}
	Run Keyword If    ${sllen_src} == ${0} and '${Returnfield}'!='All'    Return From Keyword   0 
	##以下处理返回数据过多时，截取部分数据进行筛选
    ${SrcList}    Run Keyword If    ${Num} is None    Get Slice From List    ${SrcList}    -10
    ...    ELSE IF    ${Num}>0    Get Slice From List    ${SrcList}    0    ${Num}
    ...    ELSE IF    ${Num}<0    Get Slice From List    ${SrcList}    ${Num}
    ...    ELSE    Get Slice From List    ${SrcList}    0
	${sllen}   BuiltIn.Get Length    ${SrcList}
	##以下处理条件过滤处理
	${ReturnValuesting}   Set Variable  ${EMPTY}
	@{returnlist}    Create List    
    : FOR    ${scr_single}    IN     @{SrcList}
	\	 ${f1}   Get Count   ${scr_single}   ${filterfield1}
	\	 ${f2}   Get Count   ${scr_single}   ${filterfield2}
	\	 ${f3}   Get Count   ${scr_single}   ${filterfield3}
	\	 ${field1Value}  Run Keyword If   ${f1}>0   Get In Dictionary    ${scr_single}     ${filterfield1}     ELSE   Set Variable  ${-2}
	\	 ${field2Value}  Run Keyword If   ${f2}>0   Get In Dictionary    ${scr_single}     ${filterfield2}     ELSE   Set Variable  ${-2}
	\	 ${field3Value}  Run Keyword If   ${f3}>0   Get In Dictionary    ${scr_single}     ${filterfield3}     ELSE   Set Variable  ${-2}
	\    ${Returnfieldstr}  Run Keyword If   '${Returnfield}'!='All'    Get In Dictionary    ${scr_single}   ${Returnfield}
	\	 ...	ELSE   Stringify Json    ${scr_single}
    \    ${ReturnValue}    Run Keyword If    ${filterfield1min}<=${field1Value}<=${filterfield1max} and ${filterfield2min}<=${field2Value}<=${filterfield2max} and ${filterfield3min}<=${field3Value}<=${filterfield3max}   Set Variable    ${Returnfieldstr}      ELSE  Set Variable   ${EMPTY}
	\    ${ReturnValuesting}    Run Keyword If   '${ReturnValue}'!='${EMPTY}'   Convert To String   ${ReturnValue}
	\	 Run Keyword If    '${ReturnValue}'!='${EMPTY}'    Append To List    ${returnlist}     ${ReturnValue}  
	\	 Run Keyword If    "${Returnfield}"=="All" and '${ReturnValue}'!='${EMPTY}'     Return From Keyword    @{returnlist}
    \    Run Keyword If    "${Returnfield}"!="All" and '${ReturnValue}'!='${EMPTY}'     Return From Keyword    ${ReturnValuesting}
    #Remove Values From List    ${returnlist}    ${EMPTY}
	##对没有找到符合条件时返回的处理
    @{returnlist}    Create List    0
	${ReturnValuesting}   Set Variable  0
    log    FilterList End ......
    Run Keyword If    "${Returnfield}"=="All"    Return From Keyword    @{returnlist}
    ...    ELSE    Return From Keyword    ${ReturnValuesting}

callkeywords
    [Arguments]    ${str}    ${type}=None
    [Documentation]    按顺序执行多个关键字,并返回每个关键的执行结果，str输入方法为关键字之前用分号（;）隔开，关键字与传参之间用冒号（：）隔开，比如：Getmyclassid:${userName};Getmywallet:${userName}:balanceAmount 这个是执行两个关键字(Getmyclassid,Getmywallet)，每个关键字的冒号后为传参；
    [Timeout]    30 seconds
    log    callkeywords Start ......
    @{result}    Create List
    @{keywordslist}=    Split String    ${str}    ;
    : FOR    ${keywordvalue}    IN    @{keywordslist}
    \    @{keywordlists}    Split String    ${keywordvalue}    :
    \    ${keyword}    Get From List    ${keywordlists}    0
    \    ${keywordinput}    replace string    ${keywordvalue}    ${keyword}:    ${EMPTY}
    \    @{input}    Split String    ${keywordinput}    :
    \    ${keywordresult}    Run Keyword    ${keyword}    @{input}
    \    Append To List    ${result}    ${keywordresult}
    log    callkeywords End ......
    [Return]    ${result}

Getsting
    [Arguments]    ${string}    ${str}
    [Documentation]    将字典类型的字符串取出相应key的值,比如字符串{"source": "", "second": 311, "meter": 1017}中取出meter的值
    log    Getsting Start ......
    ${intstart}    evaluate    ${string}[${str}]
    log    Getsting End ......
    [Return]    ${intstart}

randomchoice
    [Arguments]    ${str}    ${spitstr}=None
    [Documentation]    将字符串分割后随机返回 abcdef;12;aaaa;123ewq;ddd 以;分割随机返回${str}为源字符串，${spitstr}为源字符串中的分割符；
    log    randomchoice Start ......
    ${spitstr}   Run Keyword IF   '${spitstr}' is None  set Variable  ,   ELSE  Set Variable   ${spitstr}
	Run Keyword IF  '${str}' is None    Return From Keyword  0
	Run Keyword IF  '${str}'=='${EMPTY}'    Return From Keyword  0
	${str}  Convert To String  ${str}
	${len}   Get Count   ${str}   ${spitstr}
	Run Keyword IF  ${len}==0    Return From Keyword  ${str}
    @{list}=    Split String    ${str}    ${spitstr}
    ${stinglen}    evaluate    len(${list})
    ${strReturn}    evaluate    random.choice(${list})    random
    log    ======共${stinglen}数据，随机选中：${strReturn}========
    log    randomchoice End ......
    [Return]    ${strReturn}

choiceOrd
    [Arguments]    ${str}    ${ords}    ${spitstr}=None
    [Documentation]    将字符串分割后按序号返回 abcdef;12;aaaa;123ewq;ddd 以;分割随机返回${str}为源字符串，${spitstr}为源字符串中的分割符（，为默认分隔符）；ords为序号，大于0时，按序号返回，1返第1个值，小于0时，按倒序返回，-1为返回最后一个值，当为0时，即为随机返回一个值；注意分隔符在源字符串仅作分隔符用，正常的值不能有分隔符；
    log    choiceOrd Start ......
    #log    spitstr======${spitstr};'${spitstr}'=='None'
    @{choicelist}    Run keyword If    '${spitstr}'=='None'    Split String    ${str}    ,
    ...    ELSE    Split String    ${str}    ${spitstr}
    ${stinglen}    evaluate    len(${choicelist})
    ${ordMax}    evaluate    len(${choicelist})-1
    ${ord}    evaluate    ${ords}-1
    ${strReturn}    Run keyword If    ${stinglen}>0 and ${ords}>=${stinglen}    Get From List    ${choicelist}    ${ordMax}
    ...    ELSE IF    ${stinglen}>0 and ${ords}<${stinglen} and ${ords}==0    randomchoice    ${str}    ${spitstr}
    ...    ELSE IF    ${stinglen}>0 and ${ords}<${stinglen} and ${ords}>0    Get From List    ${choicelist}    ${ord}
    ...    ELSE IF    ${stinglen}>0 and ${ords}<${stinglen} and ${ords}<0    Get From List    ${choicelist}    ${ords}
    ...    ELSE    Set variable    ${EMPTY}
    Run keyword If    ${ords}>0    log    总共${stinglen}组数据,选中第${ords}组,数据为：${strReturn}
    ...    ELSE IF    ${ords}<0    log    总共${stinglen}组数据,选中倒数第${ords}组,数据为：${strReturn}
    log    choiceOrd End ......
    [Return]    ${strReturn}

stringtolist
    [Arguments]    ${input}
    log    stringtolist Start ......
    ${list}=    set variable    ${input}
    ${list}=    replace string    ${list}    {    ${EMPTY}
    ${list}=    replace string    ${list}    }    ${EMPTY}
    ${list}=    replace string    ${list}    "    ${EMPTY}
    @{list}=    Split String    ${list}    ,
    log    stringtolist End ......
    [Return]    @{list}

format listtostring
    [Arguments]    @{list}
    [Documentation]    将List变量(List的单个值是字典)按顺序串联成字符串，例如变量值[(u'a', u'123'),(u'b', u'456')]换成a123b456,
    log    format listtostring Start ......
    ${listtostring}=    set variable    ${EMPTY}
    ${len}=    evaluate    len(${list})
    : FOR    ${index}    IN RANGE    ${len}
    \    ${string}    evaluate    "".join(${list[${index}]})
    \    ${listtostring} =    set variable    ${listtostring}${string}
    log    format listtostring End ......
    [Return]    ${listtostring}

arraytostring
    [Arguments]    ${array}
    [Documentation]    将字符类型改为数组类型，例如变量值"[a,b c]" 换成[a,b,c]
    log    arraytostring Start ......
    ${array}    Replace string     ${array}     ${EMPTY}"   ${EMPTY}
    ${array}    Replace string     ${array}     "${EMPTY}   ${EMPTY}
    # ${list}=    evaluate    ${array}
    log    arraytostring End ......
    [Return]    ${array}

listtolist
    [Arguments]    ${a}    ${b}
    [Documentation]    将字符类型改为数组类型[aa,bb] 与[cc,dd] 合并成[aa,bb,cc,dd] ,${a} ${b}为list类型变量@{a}@{b}
    log    listtolist Start ......
    log    =====合并数组listtolist=========
    ${lena}=    evaluate    len(${a})
    ${lenb}=    evaluate    len(${b})
    ${listasting}=    set variable    abcdefg19527egthejoyrun9898
    ${listbsting}=    set variable    abcdefg19527egthejoyrun9898
    : FOR    ${indexa}    IN RANGE    0    ${lena}
    \    ${lista1}    set variable    ${a[${indexa}]}
    \    ${listasting}=    set variable    ${listasting},${lista1}
    : FOR    ${indexb}    IN RANGE    0    ${lenb}
    \    ${listb1}    set variable    ${b[${indexb}]}
    \    ${listbsting}=    set variable    ${listbsting},${listb1}
    ${abstring}    set variable    ${listasting},${listbsting}
    ${abstring}=    replace string    ${abstring}    abcdefg19527egthejoyrun9898,    ${EMPTY}
    ${abstring}    set variable    [${abstring}]
    log    listtolist End ......
    [Return]    ${abstring}

countbyitem
    [Arguments]    ${content}    ${item}    ${attribute}
    [Documentation]    检查每个分类返回的数据个数
    log    countbyitem Start ......
    ${dict}=    Evaluate    json.dumps(${content})    json
    ${jkey}=    Evaluate    ${dict}.get('data').get('${item}')    json
    ${jkey}=    Convert To String    ${jkey}
    ${count}    Get Count    ${jkey}    ${attribute}
    log    countbyitem End ......
    [Return]    ${count}

GetServertime
    [Arguments]    ${login_URL}
    [Documentation]    获取服务端的时间
    log    GetServertime Start ......
    ${time}=    Get Time    epoch
    log    time= ${time}
    ${isend}    evaluate    int(${time})-${Goltimestamp}-180
    Run Keyword If    ${isend}>=0    Create Session    timestamp    ${login_URL}
    ${resptime}    Run Keyword If    ${isend}>=0    RequestsLibrary.Get Request    timestamp    /GetTimestamp.aspx
    ${contentime}    Run Keyword If    ${isend}>=0    charconver    ${resptime.content}
    Run Keyword If    ${isend}>=0    log json    ${resptime.content}
    ${timestamp}    Run Keyword If    ${isend}>=0    get json value    ${contentime}    /lasttime
    ...    ELSE    set variable    ${Goltimestamp}
    set global variable    ${Goltimestamp}    ${timestamp}
    log    GetServertime End ......
    [Return]    ${timestamp}

Env_URL
    [Arguments]    ${InputURL}
    [Documentation]    根据URL判断运行环境
    log    Env_URL Start ......
    log    URL==【${InputURL}】
    ${Testcount1}    Get Lines Matching Pattern    ${InputURL}    *-test*
	${Testcount2}    Get Lines Matching Pattern    ${InputURL}    *-betaenv*
	${Testcount}    set variable   ${Testcount1}${Testcount2}
    ${env_out}    Run Keyword If    '${Testcount}'=='${EMPTY}'    set variable    Online
    ...    ELSE IF   '${Testcount1}'!='${EMPTY}'   set variable    Test
	...    ELSE   set variable    Beta
    log    Env_URL End ......
    [Return]    ${env_out}

