#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#
#_*_ coding:utf-8 _*_
from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class UserVO:
  """
  Attributes:
   - userId
   - userName
   - email
   - kugouId
   - nickName
   - userLogo
   - auditStatus
   - coin
   - starLevel
   - richLevel
   - roomId
   - status
   - statusTime
   - sex
   - actionType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.STRING, 'email', None, None, ), # 3
    (4, TType.I64, 'kugouId', None, None, ), # 4
    (5, TType.STRING, 'nickName', None, None, ), # 5
    (6, TType.STRING, 'userLogo', None, None, ), # 6
    (7, TType.I32, 'auditStatus', None, None, ), # 7
    (8, TType.DOUBLE, 'coin', None, None, ), # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    (17, TType.I32, 'starLevel', None, None, ), # 17
    (18, TType.I32, 'richLevel', None, None, ), # 18
    (19, TType.I32, 'roomId', None, None, ), # 19
    (20, TType.I32, 'status', None, None, ), # 20
    (21, TType.I32, 'statusTime', None, None, ), # 21
    (22, TType.I32, 'sex', None, None, ), # 22
    (23, TType.I32, 'actionType', None, None, ), # 23
  )

  def __init__(self, userId=None, userName=None, email=None, kugouId=None, nickName=None, userLogo=None, auditStatus=None, coin=None, starLevel=None, richLevel=None, roomId=None, status=None, statusTime=None, sex=None, actionType=None,):
    self.userId = userId
    self.userName = userName
    self.email = email
    self.kugouId = kugouId
    self.nickName = nickName
    self.userLogo = userLogo
    self.auditStatus = auditStatus
    self.coin = coin
    self.starLevel = starLevel
    self.richLevel = richLevel
    self.roomId = roomId
    self.status = status
    self.statusTime = statusTime
    self.sex = sex
    self.actionType = actionType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.nickName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.userLogo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.auditStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.coin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.starLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.richLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.roomId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.statusTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.sex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.actionType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserVO')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I64, 1)
      oprot.writeI64(self.userId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 3)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 4)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.nickName is not None:
      oprot.writeFieldBegin('nickName', TType.STRING, 5)
      oprot.writeString(self.nickName)
      oprot.writeFieldEnd()
    if self.userLogo is not None:
      oprot.writeFieldBegin('userLogo', TType.STRING, 6)
      oprot.writeString(self.userLogo)
      oprot.writeFieldEnd()
    if self.auditStatus is not None:
      oprot.writeFieldBegin('auditStatus', TType.I32, 7)
      oprot.writeI32(self.auditStatus)
      oprot.writeFieldEnd()
    if self.coin is not None:
      oprot.writeFieldBegin('coin', TType.DOUBLE, 8)
      oprot.writeDouble(self.coin)
      oprot.writeFieldEnd()
    if self.starLevel is not None:
      oprot.writeFieldBegin('starLevel', TType.I32, 17)
      oprot.writeI32(self.starLevel)
      oprot.writeFieldEnd()
    if self.richLevel is not None:
      oprot.writeFieldBegin('richLevel', TType.I32, 18)
      oprot.writeI32(self.richLevel)
      oprot.writeFieldEnd()
    if self.roomId is not None:
      oprot.writeFieldBegin('roomId', TType.I32, 19)
      oprot.writeI32(self.roomId)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 20)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.statusTime is not None:
      oprot.writeFieldBegin('statusTime', TType.I32, 21)
      oprot.writeI32(self.statusTime)
      oprot.writeFieldEnd()
    if self.sex is not None:
      oprot.writeFieldBegin('sex', TType.I32, 22)
      oprot.writeI32(self.sex)
      oprot.writeFieldEnd()
    if self.actionType is not None:
      oprot.writeFieldBegin('actionType', TType.I32, 23)
      oprot.writeI32(self.actionType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.email)
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.nickName)
    value = (value * 31) ^ hash(self.userLogo)
    value = (value * 31) ^ hash(self.auditStatus)
    value = (value * 31) ^ hash(self.coin)
    value = (value * 31) ^ hash(self.starLevel)
    value = (value * 31) ^ hash(self.richLevel)
    value = (value * 31) ^ hash(self.roomId)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.statusTime)
    value = (value * 31) ^ hash(self.sex)
    value = (value * 31) ^ hash(self.actionType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserAttrVO:
  """
  Attributes:
   - kugouId
   - defaultRoomId
   - fromType
   - openId
   - addTime
   - regIp
   - constellation
   - height
   - weight
   - bV
   - wV
   - hV
   - weibo
   - location
   - bwh
   - liveTimes
   - actionType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.I32, 'defaultRoomId', None, None, ), # 2
    (3, TType.I32, 'fromType', None, None, ), # 3
    (4, TType.STRING, 'openId', None, None, ), # 4
    (5, TType.I32, 'addTime', None, None, ), # 5
    (6, TType.STRING, 'regIp', None, None, ), # 6
    (7, TType.I32, 'constellation', None, None, ), # 7
    (8, TType.I32, 'height', None, None, ), # 8
    (9, TType.I32, 'weight', None, None, ), # 9
    (10, TType.I32, 'bV', None, None, ), # 10
    (11, TType.I32, 'wV', None, None, ), # 11
    (12, TType.I32, 'hV', None, None, ), # 12
    (13, TType.STRING, 'weibo', None, None, ), # 13
    (14, TType.STRING, 'location', None, None, ), # 14
    (15, TType.STRING, 'bwh', None, None, ), # 15
    (16, TType.STRING, 'liveTimes', None, None, ), # 16
    (17, TType.I32, 'actionType', None, None, ), # 17
  )

  def __init__(self, kugouId=None, defaultRoomId=None, fromType=None, openId=None, addTime=None, regIp=None, constellation=None, height=None, weight=None, bV=None, wV=None, hV=None, weibo=None, location=None, bwh=None, liveTimes=None, actionType=None,):
    self.kugouId = kugouId
    self.defaultRoomId = defaultRoomId
    self.fromType = fromType
    self.openId = openId
    self.addTime = addTime
    self.regIp = regIp
    self.constellation = constellation
    self.height = height
    self.weight = weight
    self.bV = bV
    self.wV = wV
    self.hV = hV
    self.weibo = weibo
    self.location = location
    self.bwh = bwh
    self.liveTimes = liveTimes
    self.actionType = actionType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.defaultRoomId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.fromType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.openId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.addTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.regIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.constellation = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.height = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.weight = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.bV = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.wV = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.hV = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.weibo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.location = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.bwh = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.liveTimes = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.actionType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserAttrVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.defaultRoomId is not None:
      oprot.writeFieldBegin('defaultRoomId', TType.I32, 2)
      oprot.writeI32(self.defaultRoomId)
      oprot.writeFieldEnd()
    if self.fromType is not None:
      oprot.writeFieldBegin('fromType', TType.I32, 3)
      oprot.writeI32(self.fromType)
      oprot.writeFieldEnd()
    if self.openId is not None:
      oprot.writeFieldBegin('openId', TType.STRING, 4)
      oprot.writeString(self.openId)
      oprot.writeFieldEnd()
    if self.addTime is not None:
      oprot.writeFieldBegin('addTime', TType.I32, 5)
      oprot.writeI32(self.addTime)
      oprot.writeFieldEnd()
    if self.regIp is not None:
      oprot.writeFieldBegin('regIp', TType.STRING, 6)
      oprot.writeString(self.regIp)
      oprot.writeFieldEnd()
    if self.constellation is not None:
      oprot.writeFieldBegin('constellation', TType.I32, 7)
      oprot.writeI32(self.constellation)
      oprot.writeFieldEnd()
    if self.height is not None:
      oprot.writeFieldBegin('height', TType.I32, 8)
      oprot.writeI32(self.height)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I32, 9)
      oprot.writeI32(self.weight)
      oprot.writeFieldEnd()
    if self.bV is not None:
      oprot.writeFieldBegin('bV', TType.I32, 10)
      oprot.writeI32(self.bV)
      oprot.writeFieldEnd()
    if self.wV is not None:
      oprot.writeFieldBegin('wV', TType.I32, 11)
      oprot.writeI32(self.wV)
      oprot.writeFieldEnd()
    if self.hV is not None:
      oprot.writeFieldBegin('hV', TType.I32, 12)
      oprot.writeI32(self.hV)
      oprot.writeFieldEnd()
    if self.weibo is not None:
      oprot.writeFieldBegin('weibo', TType.STRING, 13)
      oprot.writeString(self.weibo)
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.STRING, 14)
      oprot.writeString(self.location)
      oprot.writeFieldEnd()
    if self.bwh is not None:
      oprot.writeFieldBegin('bwh', TType.STRING, 15)
      oprot.writeString(self.bwh)
      oprot.writeFieldEnd()
    if self.liveTimes is not None:
      oprot.writeFieldBegin('liveTimes', TType.STRING, 16)
      oprot.writeString(self.liveTimes)
      oprot.writeFieldEnd()
    if self.actionType is not None:
      oprot.writeFieldBegin('actionType', TType.I32, 17)
      oprot.writeI32(self.actionType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.defaultRoomId)
    value = (value * 31) ^ hash(self.fromType)
    value = (value * 31) ^ hash(self.openId)
    value = (value * 31) ^ hash(self.addTime)
    value = (value * 31) ^ hash(self.regIp)
    value = (value * 31) ^ hash(self.constellation)
    value = (value * 31) ^ hash(self.height)
    value = (value * 31) ^ hash(self.weight)
    value = (value * 31) ^ hash(self.bV)
    value = (value * 31) ^ hash(self.wV)
    value = (value * 31) ^ hash(self.hV)
    value = (value * 31) ^ hash(self.weibo)
    value = (value * 31) ^ hash(self.location)
    value = (value * 31) ^ hash(self.bwh)
    value = (value * 31) ^ hash(self.liveTimes)
    value = (value * 31) ^ hash(self.actionType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserDataVO:
  """
  Attributes:
   - kugouId
   - payCount
   - liveCount
   - audioCount
   - fansCount
   - followCount
   - xxCount
   - fansValueCount
   - giftCount
   - photoCount
   - videoCount
   - messageCount
   - actionType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.I32, 'payCount', None, None, ), # 2
    (3, TType.I32, 'liveCount', None, None, ), # 3
    (4, TType.I32, 'audioCount', None, None, ), # 4
    (5, TType.I32, 'fansCount', None, None, ), # 5
    (6, TType.I32, 'followCount', None, None, ), # 6
    (7, TType.I64, 'xxCount', None, None, ), # 7
    (8, TType.I64, 'fansValueCount', None, None, ), # 8
    (9, TType.I32, 'giftCount', None, None, ), # 9
    (10, TType.I32, 'photoCount', None, None, ), # 10
    (11, TType.I32, 'videoCount', None, None, ), # 11
    (12, TType.I32, 'messageCount', None, None, ), # 12
    (13, TType.I32, 'actionType', None, None, ), # 13
  )

  def __init__(self, kugouId=None, payCount=None, liveCount=None, audioCount=None, fansCount=None, followCount=None, xxCount=None, fansValueCount=None, giftCount=None, photoCount=None, videoCount=None, messageCount=None, actionType=None,):
    self.kugouId = kugouId
    self.payCount = payCount
    self.liveCount = liveCount
    self.audioCount = audioCount
    self.fansCount = fansCount
    self.followCount = followCount
    self.xxCount = xxCount
    self.fansValueCount = fansValueCount
    self.giftCount = giftCount
    self.photoCount = photoCount
    self.videoCount = videoCount
    self.messageCount = messageCount
    self.actionType = actionType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.payCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.liveCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.audioCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.fansCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.followCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.xxCount = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.fansValueCount = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.giftCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.photoCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.videoCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.messageCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.actionType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserDataVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.payCount is not None:
      oprot.writeFieldBegin('payCount', TType.I32, 2)
      oprot.writeI32(self.payCount)
      oprot.writeFieldEnd()
    if self.liveCount is not None:
      oprot.writeFieldBegin('liveCount', TType.I32, 3)
      oprot.writeI32(self.liveCount)
      oprot.writeFieldEnd()
    if self.audioCount is not None:
      oprot.writeFieldBegin('audioCount', TType.I32, 4)
      oprot.writeI32(self.audioCount)
      oprot.writeFieldEnd()
    if self.fansCount is not None:
      oprot.writeFieldBegin('fansCount', TType.I32, 5)
      oprot.writeI32(self.fansCount)
      oprot.writeFieldEnd()
    if self.followCount is not None:
      oprot.writeFieldBegin('followCount', TType.I32, 6)
      oprot.writeI32(self.followCount)
      oprot.writeFieldEnd()
    if self.xxCount is not None:
      oprot.writeFieldBegin('xxCount', TType.I64, 7)
      oprot.writeI64(self.xxCount)
      oprot.writeFieldEnd()
    if self.fansValueCount is not None:
      oprot.writeFieldBegin('fansValueCount', TType.I64, 8)
      oprot.writeI64(self.fansValueCount)
      oprot.writeFieldEnd()
    if self.giftCount is not None:
      oprot.writeFieldBegin('giftCount', TType.I32, 9)
      oprot.writeI32(self.giftCount)
      oprot.writeFieldEnd()
    if self.photoCount is not None:
      oprot.writeFieldBegin('photoCount', TType.I32, 10)
      oprot.writeI32(self.photoCount)
      oprot.writeFieldEnd()
    if self.videoCount is not None:
      oprot.writeFieldBegin('videoCount', TType.I32, 11)
      oprot.writeI32(self.videoCount)
      oprot.writeFieldEnd()
    if self.messageCount is not None:
      oprot.writeFieldBegin('messageCount', TType.I32, 12)
      oprot.writeI32(self.messageCount)
      oprot.writeFieldEnd()
    if self.actionType is not None:
      oprot.writeFieldBegin('actionType', TType.I32, 13)
      oprot.writeI32(self.actionType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.payCount)
    value = (value * 31) ^ hash(self.liveCount)
    value = (value * 31) ^ hash(self.audioCount)
    value = (value * 31) ^ hash(self.fansCount)
    value = (value * 31) ^ hash(self.followCount)
    value = (value * 31) ^ hash(self.xxCount)
    value = (value * 31) ^ hash(self.fansValueCount)
    value = (value * 31) ^ hash(self.giftCount)
    value = (value * 31) ^ hash(self.photoCount)
    value = (value * 31) ^ hash(self.videoCount)
    value = (value * 31) ^ hash(self.messageCount)
    value = (value * 31) ^ hash(self.actionType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserExtAttrVO:
  """
  Attributes:
   - kugouId
   - unionId
   - clanId
   - badgeBuyTypeId
   - sUnionId
   - actionType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.I64, 'unionId', None, None, ), # 2
    (3, TType.I64, 'clanId', None, None, ), # 3
    (4, TType.I32, 'badgeBuyTypeId', None, None, ), # 4
    (5, TType.STRING, 'sUnionId', None, None, ), # 5
    (6, TType.I32, 'actionType', None, None, ), # 6
  )

  def __init__(self, kugouId=None, unionId=None, clanId=None, badgeBuyTypeId=None, sUnionId=None, actionType=None,):
    self.kugouId = kugouId
    self.unionId = unionId
    self.clanId = clanId
    self.badgeBuyTypeId = badgeBuyTypeId
    self.sUnionId = sUnionId
    self.actionType = actionType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.unionId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.clanId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.badgeBuyTypeId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sUnionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.actionType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserExtAttrVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.unionId is not None:
      oprot.writeFieldBegin('unionId', TType.I64, 2)
      oprot.writeI64(self.unionId)
      oprot.writeFieldEnd()
    if self.clanId is not None:
      oprot.writeFieldBegin('clanId', TType.I64, 3)
      oprot.writeI64(self.clanId)
      oprot.writeFieldEnd()
    if self.badgeBuyTypeId is not None:
      oprot.writeFieldBegin('badgeBuyTypeId', TType.I32, 4)
      oprot.writeI32(self.badgeBuyTypeId)
      oprot.writeFieldEnd()
    if self.sUnionId is not None:
      oprot.writeFieldBegin('sUnionId', TType.STRING, 5)
      oprot.writeString(self.sUnionId)
      oprot.writeFieldEnd()
    if self.actionType is not None:
      oprot.writeFieldBegin('actionType', TType.I32, 6)
      oprot.writeI32(self.actionType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.unionId)
    value = (value * 31) ^ hash(self.clanId)
    value = (value * 31) ^ hash(self.badgeBuyTypeId)
    value = (value * 31) ^ hash(self.sUnionId)
    value = (value * 31) ^ hash(self.actionType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserVipVO:
  """
  Attributes:
   - kugouId
   - level
   - startTime
   - endTime
   - cloaking
   - actionType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.I32, 'level', None, None, ), # 2
    (3, TType.I64, 'startTime', None, None, ), # 3
    (4, TType.I64, 'endTime', None, None, ), # 4
    (5, TType.I32, 'cloaking', None, None, ), # 5
    (6, TType.I32, 'actionType', None, None, ), # 6
  )

  def __init__(self, kugouId=None, level=None, startTime=None, endTime=None, cloaking=None, actionType=None,):
    self.kugouId = kugouId
    self.level = level
    self.startTime = startTime
    self.endTime = endTime
    self.cloaking = cloaking
    self.actionType = actionType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.startTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.endTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.cloaking = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.actionType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserVipVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 2)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I64, 3)
      oprot.writeI64(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I64, 4)
      oprot.writeI64(self.endTime)
      oprot.writeFieldEnd()
    if self.cloaking is not None:
      oprot.writeFieldBegin('cloaking', TType.I32, 5)
      oprot.writeI32(self.cloaking)
      oprot.writeFieldEnd()
    if self.actionType is not None:
      oprot.writeFieldBegin('actionType', TType.I32, 6)
      oprot.writeI32(self.actionType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.startTime)
    value = (value * 31) ^ hash(self.endTime)
    value = (value * 31) ^ hash(self.cloaking)
    value = (value * 31) ^ hash(self.actionType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserMountVO:
  """
  Attributes:
   - autoId
   - kugouId
   - mountId
   - isUsing
   - validTime
   - startTime
   - endTime
   - actionType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'autoId', None, None, ), # 1
    (2, TType.I64, 'kugouId', None, None, ), # 2
    (3, TType.I32, 'mountId', None, None, ), # 3
    (4, TType.I32, 'isUsing', None, None, ), # 4
    (5, TType.I32, 'validTime', None, None, ), # 5
    (6, TType.I32, 'startTime', None, None, ), # 6
    (7, TType.I32, 'endTime', None, None, ), # 7
    (8, TType.I32, 'actionType', None, None, ), # 8
  )

  def __init__(self, autoId=None, kugouId=None, mountId=None, isUsing=None, validTime=None, startTime=None, endTime=None, actionType=None,):
    self.autoId = autoId
    self.kugouId = kugouId
    self.mountId = mountId
    self.isUsing = isUsing
    self.validTime = validTime
    self.startTime = startTime
    self.endTime = endTime
    self.actionType = actionType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.autoId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.mountId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.isUsing = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.validTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.actionType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserMountVO')
    if self.autoId is not None:
      oprot.writeFieldBegin('autoId', TType.I32, 1)
      oprot.writeI32(self.autoId)
      oprot.writeFieldEnd()
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 2)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.mountId is not None:
      oprot.writeFieldBegin('mountId', TType.I32, 3)
      oprot.writeI32(self.mountId)
      oprot.writeFieldEnd()
    if self.isUsing is not None:
      oprot.writeFieldBegin('isUsing', TType.I32, 4)
      oprot.writeI32(self.isUsing)
      oprot.writeFieldEnd()
    if self.validTime is not None:
      oprot.writeFieldBegin('validTime', TType.I32, 5)
      oprot.writeI32(self.validTime)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 6)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 7)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.actionType is not None:
      oprot.writeFieldBegin('actionType', TType.I32, 8)
      oprot.writeI32(self.actionType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.autoId)
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.mountId)
    value = (value * 31) ^ hash(self.isUsing)
    value = (value * 31) ^ hash(self.validTime)
    value = (value * 31) ^ hash(self.startTime)
    value = (value * 31) ^ hash(self.endTime)
    value = (value * 31) ^ hash(self.actionType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserApplyAreaVO:
  """
  Attributes:
   - kugouId
   - areaId
   - areaName
   - areaCode
   - areaPosition
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.I32, 'areaId', None, None, ), # 2
    (3, TType.STRING, 'areaName', None, None, ), # 3
    (4, TType.I32, 'areaCode', None, None, ), # 4
    (5, TType.I32, 'areaPosition', None, None, ), # 5
  )

  def __init__(self, kugouId=None, areaId=None, areaName=None, areaCode=None, areaPosition=None,):
    self.kugouId = kugouId
    self.areaId = areaId
    self.areaName = areaName
    self.areaCode = areaCode
    self.areaPosition = areaPosition

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.areaId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.areaName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.areaCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.areaPosition = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserApplyAreaVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.areaId is not None:
      oprot.writeFieldBegin('areaId', TType.I32, 2)
      oprot.writeI32(self.areaId)
      oprot.writeFieldEnd()
    if self.areaName is not None:
      oprot.writeFieldBegin('areaName', TType.STRING, 3)
      oprot.writeString(self.areaName)
      oprot.writeFieldEnd()
    if self.areaCode is not None:
      oprot.writeFieldBegin('areaCode', TType.I32, 4)
      oprot.writeI32(self.areaCode)
      oprot.writeFieldEnd()
    if self.areaPosition is not None:
      oprot.writeFieldBegin('areaPosition', TType.I32, 5)
      oprot.writeI32(self.areaPosition)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.areaId)
    value = (value * 31) ^ hash(self.areaName)
    value = (value * 31) ^ hash(self.areaCode)
    value = (value * 31) ^ hash(self.areaPosition)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PhotoVO:
  """
  Attributes:
   - photoId
   - photoName
   - kugouId
   - url
   - visitCount
   - discussCount
   - addTime
   - auditStatus
   - volume
   - praiseCount
   - actionType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'photoId', None, None, ), # 1
    (2, TType.STRING, 'photoName', None, None, ), # 2
    (3, TType.I64, 'kugouId', None, None, ), # 3
    (4, TType.STRING, 'url', None, None, ), # 4
    (5, TType.I32, 'visitCount', None, None, ), # 5
    (6, TType.I32, 'discussCount', None, None, ), # 6
    (7, TType.I32, 'addTime', None, None, ), # 7
    (8, TType.I32, 'auditStatus', None, None, ), # 8
    (9, TType.I32, 'volume', None, None, ), # 9
    (10, TType.I32, 'praiseCount', None, None, ), # 10
    (11, TType.I32, 'actionType', None, None, ), # 11
  )

  def __init__(self, photoId=None, photoName=None, kugouId=None, url=None, visitCount=None, discussCount=None, addTime=None, auditStatus=None, volume=None, praiseCount=None, actionType=None,):
    self.photoId = photoId
    self.photoName = photoName
    self.kugouId = kugouId
    self.url = url
    self.visitCount = visitCount
    self.discussCount = discussCount
    self.addTime = addTime
    self.auditStatus = auditStatus
    self.volume = volume
    self.praiseCount = praiseCount
    self.actionType = actionType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.photoId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.photoName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.visitCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.discussCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.addTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.auditStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.volume = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.praiseCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.actionType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PhotoVO')
    if self.photoId is not None:
      oprot.writeFieldBegin('photoId', TType.I32, 1)
      oprot.writeI32(self.photoId)
      oprot.writeFieldEnd()
    if self.photoName is not None:
      oprot.writeFieldBegin('photoName', TType.STRING, 2)
      oprot.writeString(self.photoName)
      oprot.writeFieldEnd()
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 3)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 4)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.visitCount is not None:
      oprot.writeFieldBegin('visitCount', TType.I32, 5)
      oprot.writeI32(self.visitCount)
      oprot.writeFieldEnd()
    if self.discussCount is not None:
      oprot.writeFieldBegin('discussCount', TType.I32, 6)
      oprot.writeI32(self.discussCount)
      oprot.writeFieldEnd()
    if self.addTime is not None:
      oprot.writeFieldBegin('addTime', TType.I32, 7)
      oprot.writeI32(self.addTime)
      oprot.writeFieldEnd()
    if self.auditStatus is not None:
      oprot.writeFieldBegin('auditStatus', TType.I32, 8)
      oprot.writeI32(self.auditStatus)
      oprot.writeFieldEnd()
    if self.volume is not None:
      oprot.writeFieldBegin('volume', TType.I32, 9)
      oprot.writeI32(self.volume)
      oprot.writeFieldEnd()
    if self.praiseCount is not None:
      oprot.writeFieldBegin('praiseCount', TType.I32, 10)
      oprot.writeI32(self.praiseCount)
      oprot.writeFieldEnd()
    if self.actionType is not None:
      oprot.writeFieldBegin('actionType', TType.I32, 11)
      oprot.writeI32(self.actionType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.photoId)
    value = (value * 31) ^ hash(self.photoName)
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.url)
    value = (value * 31) ^ hash(self.visitCount)
    value = (value * 31) ^ hash(self.discussCount)
    value = (value * 31) ^ hash(self.addTime)
    value = (value * 31) ^ hash(self.auditStatus)
    value = (value * 31) ^ hash(self.volume)
    value = (value * 31) ^ hash(self.praiseCount)
    value = (value * 31) ^ hash(self.actionType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MedalVO:
  """
  Attributes:
   - medalId
   - medalName
   - addTime
   - limitTime
   - startTime
   - endTime
   - medalStatus
   - metalValue
   - medalLevel
   - conditionType
   - conditionValueType
   - relationType
   - userTypeId
   - addType
   - affectTime
   - sumTotal
   - isFinishLoop
   - extContent
   - content
   - finishedWhiteImageUrl
   - finishedGrayImageUrl
   - finishedTransImageUrl
   - finishingWhiteImageUrl
   - finishingGrayImageUrl
   - finishingTransImageUrl
   - finishlessWhiteImageUrl
   - finishlessGrayImageUrl
   - finishlessTransImageUrl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'medalId', None, None, ), # 1
    (2, TType.STRING, 'medalName', None, None, ), # 2
    (3, TType.I32, 'addTime', None, None, ), # 3
    (4, TType.I32, 'limitTime', None, None, ), # 4
    (5, TType.I32, 'startTime', None, None, ), # 5
    (6, TType.I32, 'endTime', None, None, ), # 6
    (7, TType.I32, 'medalStatus', None, None, ), # 7
    (8, TType.I32, 'metalValue', None, None, ), # 8
    (9, TType.I32, 'medalLevel', None, None, ), # 9
    (10, TType.I32, 'conditionType', None, None, ), # 10
    (11, TType.I32, 'conditionValueType', None, None, ), # 11
    (12, TType.I32, 'relationType', None, None, ), # 12
    (13, TType.I32, 'userTypeId', None, None, ), # 13
    (14, TType.I32, 'addType', None, None, ), # 14
    (15, TType.I32, 'affectTime', None, None, ), # 15
    (16, TType.I32, 'sumTotal', None, None, ), # 16
    (17, TType.I32, 'isFinishLoop', None, None, ), # 17
    (18, TType.STRING, 'extContent', None, None, ), # 18
    (19, TType.STRING, 'content', None, None, ), # 19
    (20, TType.STRING, 'finishedWhiteImageUrl', None, None, ), # 20
    (21, TType.STRING, 'finishedGrayImageUrl', None, None, ), # 21
    (22, TType.STRING, 'finishedTransImageUrl', None, None, ), # 22
    (23, TType.STRING, 'finishingWhiteImageUrl', None, None, ), # 23
    (24, TType.STRING, 'finishingGrayImageUrl', None, None, ), # 24
    (25, TType.STRING, 'finishingTransImageUrl', None, None, ), # 25
    (26, TType.STRING, 'finishlessWhiteImageUrl', None, None, ), # 26
    (27, TType.STRING, 'finishlessGrayImageUrl', None, None, ), # 27
    (28, TType.STRING, 'finishlessTransImageUrl', None, None, ), # 28
  )

  def __init__(self, medalId=None, medalName=None, addTime=None, limitTime=None, startTime=None, endTime=None, medalStatus=None, metalValue=None, medalLevel=None, conditionType=None, conditionValueType=None, relationType=None, userTypeId=None, addType=None, affectTime=None, sumTotal=None, isFinishLoop=None, extContent=None, content=None, finishedWhiteImageUrl=None, finishedGrayImageUrl=None, finishedTransImageUrl=None, finishingWhiteImageUrl=None, finishingGrayImageUrl=None, finishingTransImageUrl=None, finishlessWhiteImageUrl=None, finishlessGrayImageUrl=None, finishlessTransImageUrl=None,):
    self.medalId = medalId
    self.medalName = medalName
    self.addTime = addTime
    self.limitTime = limitTime
    self.startTime = startTime
    self.endTime = endTime
    self.medalStatus = medalStatus
    self.metalValue = metalValue
    self.medalLevel = medalLevel
    self.conditionType = conditionType
    self.conditionValueType = conditionValueType
    self.relationType = relationType
    self.userTypeId = userTypeId
    self.addType = addType
    self.affectTime = affectTime
    self.sumTotal = sumTotal
    self.isFinishLoop = isFinishLoop
    self.extContent = extContent
    self.content = content
    self.finishedWhiteImageUrl = finishedWhiteImageUrl
    self.finishedGrayImageUrl = finishedGrayImageUrl
    self.finishedTransImageUrl = finishedTransImageUrl
    self.finishingWhiteImageUrl = finishingWhiteImageUrl
    self.finishingGrayImageUrl = finishingGrayImageUrl
    self.finishingTransImageUrl = finishingTransImageUrl
    self.finishlessWhiteImageUrl = finishlessWhiteImageUrl
    self.finishlessGrayImageUrl = finishlessGrayImageUrl
    self.finishlessTransImageUrl = finishlessTransImageUrl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.medalId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.medalName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.addTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.limitTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.medalStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.metalValue = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.medalLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.conditionType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.conditionValueType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.relationType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.userTypeId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.addType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.affectTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.sumTotal = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.isFinishLoop = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.extContent = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.finishedWhiteImageUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.finishedGrayImageUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.finishedTransImageUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.finishingWhiteImageUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.finishingGrayImageUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.finishingTransImageUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.finishlessWhiteImageUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.finishlessGrayImageUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.finishlessTransImageUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MedalVO')
    if self.medalId is not None:
      oprot.writeFieldBegin('medalId', TType.I32, 1)
      oprot.writeI32(self.medalId)
      oprot.writeFieldEnd()
    if self.medalName is not None:
      oprot.writeFieldBegin('medalName', TType.STRING, 2)
      oprot.writeString(self.medalName)
      oprot.writeFieldEnd()
    if self.addTime is not None:
      oprot.writeFieldBegin('addTime', TType.I32, 3)
      oprot.writeI32(self.addTime)
      oprot.writeFieldEnd()
    if self.limitTime is not None:
      oprot.writeFieldBegin('limitTime', TType.I32, 4)
      oprot.writeI32(self.limitTime)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 5)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 6)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.medalStatus is not None:
      oprot.writeFieldBegin('medalStatus', TType.I32, 7)
      oprot.writeI32(self.medalStatus)
      oprot.writeFieldEnd()
    if self.metalValue is not None:
      oprot.writeFieldBegin('metalValue', TType.I32, 8)
      oprot.writeI32(self.metalValue)
      oprot.writeFieldEnd()
    if self.medalLevel is not None:
      oprot.writeFieldBegin('medalLevel', TType.I32, 9)
      oprot.writeI32(self.medalLevel)
      oprot.writeFieldEnd()
    if self.conditionType is not None:
      oprot.writeFieldBegin('conditionType', TType.I32, 10)
      oprot.writeI32(self.conditionType)
      oprot.writeFieldEnd()
    if self.conditionValueType is not None:
      oprot.writeFieldBegin('conditionValueType', TType.I32, 11)
      oprot.writeI32(self.conditionValueType)
      oprot.writeFieldEnd()
    if self.relationType is not None:
      oprot.writeFieldBegin('relationType', TType.I32, 12)
      oprot.writeI32(self.relationType)
      oprot.writeFieldEnd()
    if self.userTypeId is not None:
      oprot.writeFieldBegin('userTypeId', TType.I32, 13)
      oprot.writeI32(self.userTypeId)
      oprot.writeFieldEnd()
    if self.addType is not None:
      oprot.writeFieldBegin('addType', TType.I32, 14)
      oprot.writeI32(self.addType)
      oprot.writeFieldEnd()
    if self.affectTime is not None:
      oprot.writeFieldBegin('affectTime', TType.I32, 15)
      oprot.writeI32(self.affectTime)
      oprot.writeFieldEnd()
    if self.sumTotal is not None:
      oprot.writeFieldBegin('sumTotal', TType.I32, 16)
      oprot.writeI32(self.sumTotal)
      oprot.writeFieldEnd()
    if self.isFinishLoop is not None:
      oprot.writeFieldBegin('isFinishLoop', TType.I32, 17)
      oprot.writeI32(self.isFinishLoop)
      oprot.writeFieldEnd()
    if self.extContent is not None:
      oprot.writeFieldBegin('extContent', TType.STRING, 18)
      oprot.writeString(self.extContent)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 19)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.finishedWhiteImageUrl is not None:
      oprot.writeFieldBegin('finishedWhiteImageUrl', TType.STRING, 20)
      oprot.writeString(self.finishedWhiteImageUrl)
      oprot.writeFieldEnd()
    if self.finishedGrayImageUrl is not None:
      oprot.writeFieldBegin('finishedGrayImageUrl', TType.STRING, 21)
      oprot.writeString(self.finishedGrayImageUrl)
      oprot.writeFieldEnd()
    if self.finishedTransImageUrl is not None:
      oprot.writeFieldBegin('finishedTransImageUrl', TType.STRING, 22)
      oprot.writeString(self.finishedTransImageUrl)
      oprot.writeFieldEnd()
    if self.finishingWhiteImageUrl is not None:
      oprot.writeFieldBegin('finishingWhiteImageUrl', TType.STRING, 23)
      oprot.writeString(self.finishingWhiteImageUrl)
      oprot.writeFieldEnd()
    if self.finishingGrayImageUrl is not None:
      oprot.writeFieldBegin('finishingGrayImageUrl', TType.STRING, 24)
      oprot.writeString(self.finishingGrayImageUrl)
      oprot.writeFieldEnd()
    if self.finishingTransImageUrl is not None:
      oprot.writeFieldBegin('finishingTransImageUrl', TType.STRING, 25)
      oprot.writeString(self.finishingTransImageUrl)
      oprot.writeFieldEnd()
    if self.finishlessWhiteImageUrl is not None:
      oprot.writeFieldBegin('finishlessWhiteImageUrl', TType.STRING, 26)
      oprot.writeString(self.finishlessWhiteImageUrl)
      oprot.writeFieldEnd()
    if self.finishlessGrayImageUrl is not None:
      oprot.writeFieldBegin('finishlessGrayImageUrl', TType.STRING, 27)
      oprot.writeString(self.finishlessGrayImageUrl)
      oprot.writeFieldEnd()
    if self.finishlessTransImageUrl is not None:
      oprot.writeFieldBegin('finishlessTransImageUrl', TType.STRING, 28)
      oprot.writeString(self.finishlessTransImageUrl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.medalId)
    value = (value * 31) ^ hash(self.medalName)
    value = (value * 31) ^ hash(self.addTime)
    value = (value * 31) ^ hash(self.limitTime)
    value = (value * 31) ^ hash(self.startTime)
    value = (value * 31) ^ hash(self.endTime)
    value = (value * 31) ^ hash(self.medalStatus)
    value = (value * 31) ^ hash(self.metalValue)
    value = (value * 31) ^ hash(self.medalLevel)
    value = (value * 31) ^ hash(self.conditionType)
    value = (value * 31) ^ hash(self.conditionValueType)
    value = (value * 31) ^ hash(self.relationType)
    value = (value * 31) ^ hash(self.userTypeId)
    value = (value * 31) ^ hash(self.addType)
    value = (value * 31) ^ hash(self.affectTime)
    value = (value * 31) ^ hash(self.sumTotal)
    value = (value * 31) ^ hash(self.isFinishLoop)
    value = (value * 31) ^ hash(self.extContent)
    value = (value * 31) ^ hash(self.content)
    value = (value * 31) ^ hash(self.finishedWhiteImageUrl)
    value = (value * 31) ^ hash(self.finishedGrayImageUrl)
    value = (value * 31) ^ hash(self.finishedTransImageUrl)
    value = (value * 31) ^ hash(self.finishingWhiteImageUrl)
    value = (value * 31) ^ hash(self.finishingGrayImageUrl)
    value = (value * 31) ^ hash(self.finishingTransImageUrl)
    value = (value * 31) ^ hash(self.finishlessWhiteImageUrl)
    value = (value * 31) ^ hash(self.finishlessGrayImageUrl)
    value = (value * 31) ^ hash(self.finishlessTransImageUrl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MedalUserFinishingVO:
  """
  Attributes:
   - kugouId
   - medalId
   - conditionId
   - expireTime
   - conditionValue
   - currentValue
   - addType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.I32, 'medalId', None, None, ), # 2
    (3, TType.I32, 'conditionId', None, None, ), # 3
    (4, TType.I32, 'expireTime', None, None, ), # 4
    (5, TType.I32, 'conditionValue', None, None, ), # 5
    (6, TType.I32, 'currentValue', None, None, ), # 6
    (7, TType.I32, 'addType', None, None, ), # 7
  )

  def __init__(self, kugouId=None, medalId=None, conditionId=None, expireTime=None, conditionValue=None, currentValue=None, addType=None,):
    self.kugouId = kugouId
    self.medalId = medalId
    self.conditionId = conditionId
    self.expireTime = expireTime
    self.conditionValue = conditionValue
    self.currentValue = currentValue
    self.addType = addType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.medalId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.conditionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.expireTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.conditionValue = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.currentValue = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.addType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MedalUserFinishingVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.medalId is not None:
      oprot.writeFieldBegin('medalId', TType.I32, 2)
      oprot.writeI32(self.medalId)
      oprot.writeFieldEnd()
    if self.conditionId is not None:
      oprot.writeFieldBegin('conditionId', TType.I32, 3)
      oprot.writeI32(self.conditionId)
      oprot.writeFieldEnd()
    if self.expireTime is not None:
      oprot.writeFieldBegin('expireTime', TType.I32, 4)
      oprot.writeI32(self.expireTime)
      oprot.writeFieldEnd()
    if self.conditionValue is not None:
      oprot.writeFieldBegin('conditionValue', TType.I32, 5)
      oprot.writeI32(self.conditionValue)
      oprot.writeFieldEnd()
    if self.currentValue is not None:
      oprot.writeFieldBegin('currentValue', TType.I32, 6)
      oprot.writeI32(self.currentValue)
      oprot.writeFieldEnd()
    if self.addType is not None:
      oprot.writeFieldBegin('addType', TType.I32, 7)
      oprot.writeI32(self.addType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.medalId)
    value = (value * 31) ^ hash(self.conditionId)
    value = (value * 31) ^ hash(self.expireTime)
    value = (value * 31) ^ hash(self.conditionValue)
    value = (value * 31) ^ hash(self.currentValue)
    value = (value * 31) ^ hash(self.addType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MedalUserFinishedVO:
  """
  Attributes:
   - kugouId
   - medalId
   - finishedStartTime
   - finishedEndTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.I32, 'medalId', None, None, ), # 2
    (3, TType.I32, 'finishedStartTime', None, None, ), # 3
    (4, TType.I32, 'finishedEndTime', None, None, ), # 4
  )

  def __init__(self, kugouId=None, medalId=None, finishedStartTime=None, finishedEndTime=None,):
    self.kugouId = kugouId
    self.medalId = medalId
    self.finishedStartTime = finishedStartTime
    self.finishedEndTime = finishedEndTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.medalId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.finishedStartTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.finishedEndTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MedalUserFinishedVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.medalId is not None:
      oprot.writeFieldBegin('medalId', TType.I32, 2)
      oprot.writeI32(self.medalId)
      oprot.writeFieldEnd()
    if self.finishedStartTime is not None:
      oprot.writeFieldBegin('finishedStartTime', TType.I32, 3)
      oprot.writeI32(self.finishedStartTime)
      oprot.writeFieldEnd()
    if self.finishedEndTime is not None:
      oprot.writeFieldBegin('finishedEndTime', TType.I32, 4)
      oprot.writeI32(self.finishedEndTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.medalId)
    value = (value * 31) ^ hash(self.finishedStartTime)
    value = (value * 31) ^ hash(self.finishedEndTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SubscribeVO:
  """
  Attributes:
   - kugouId
   - starKugouId
   - addTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.I64, 'starKugouId', None, None, ), # 2
    (3, TType.I32, 'addTime', None, None, ), # 3
  )

  def __init__(self, kugouId=None, starKugouId=None, addTime=None,):
    self.kugouId = kugouId
    self.starKugouId = starKugouId
    self.addTime = addTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.starKugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.addTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubscribeVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.starKugouId is not None:
      oprot.writeFieldBegin('starKugouId', TType.I64, 2)
      oprot.writeI64(self.starKugouId)
      oprot.writeFieldEnd()
    if self.addTime is not None:
      oprot.writeFieldBegin('addTime', TType.I32, 3)
      oprot.writeI32(self.addTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.starKugouId)
    value = (value * 31) ^ hash(self.addTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserCompanyVO:
  """
  Attributes:
   - kugouId
   - companyName
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.STRING, 'companyName', None, None, ), # 2
  )

  def __init__(self, kugouId=None, companyName=None,):
    self.kugouId = kugouId
    self.companyName = companyName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.companyName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserCompanyVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.companyName is not None:
      oprot.writeFieldBegin('companyName', TType.STRING, 2)
      oprot.writeString(self.companyName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.companyName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserRecommendVO:
  """
  Attributes:
   - kugouId
   - auditStatus
   - photoPath
   - applyPhotoPath
   - applyTime
   - auditTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.I32, 'auditStatus', None, None, ), # 2
    (3, TType.STRING, 'photoPath', None, None, ), # 3
    (4, TType.STRING, 'applyPhotoPath', None, None, ), # 4
    (5, TType.I32, 'applyTime', None, None, ), # 5
    (6, TType.I32, 'auditTime', None, None, ), # 6
  )

  def __init__(self, kugouId=None, auditStatus=None, photoPath=None, applyPhotoPath=None, applyTime=None, auditTime=None,):
    self.kugouId = kugouId
    self.auditStatus = auditStatus
    self.photoPath = photoPath
    self.applyPhotoPath = applyPhotoPath
    self.applyTime = applyTime
    self.auditTime = auditTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.auditStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.photoPath = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.applyPhotoPath = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.applyTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.auditTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserRecommendVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.auditStatus is not None:
      oprot.writeFieldBegin('auditStatus', TType.I32, 2)
      oprot.writeI32(self.auditStatus)
      oprot.writeFieldEnd()
    if self.photoPath is not None:
      oprot.writeFieldBegin('photoPath', TType.STRING, 3)
      oprot.writeString(self.photoPath)
      oprot.writeFieldEnd()
    if self.applyPhotoPath is not None:
      oprot.writeFieldBegin('applyPhotoPath', TType.STRING, 4)
      oprot.writeString(self.applyPhotoPath)
      oprot.writeFieldEnd()
    if self.applyTime is not None:
      oprot.writeFieldBegin('applyTime', TType.I32, 5)
      oprot.writeI32(self.applyTime)
      oprot.writeFieldEnd()
    if self.auditTime is not None:
      oprot.writeFieldBegin('auditTime', TType.I32, 6)
      oprot.writeI32(self.auditTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.auditStatus)
    value = (value * 31) ^ hash(self.photoPath)
    value = (value * 31) ^ hash(self.applyPhotoPath)
    value = (value * 31) ^ hash(self.applyTime)
    value = (value * 31) ^ hash(self.auditTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserFollowVO:
  """
  Attributes:
   - kugouId
   - followKugouId
   - status
   - addTime
   - isHasView
   - userId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.I64, 'followKugouId', None, None, ), # 2
    (3, TType.I32, 'status', None, None, ), # 3
    (4, TType.I32, 'addTime', None, None, ), # 4
    (5, TType.I32, 'isHasView', None, None, ), # 5
    (6, TType.I64, 'userId', None, None, ), # 6
  )

  def __init__(self, kugouId=None, followKugouId=None, status=None, addTime=None, isHasView=None, userId=None,):
    self.kugouId = kugouId
    self.followKugouId = followKugouId
    self.status = status
    self.addTime = addTime
    self.isHasView = isHasView
    self.userId = userId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.followKugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.addTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.isHasView = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.userId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserFollowVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.followKugouId is not None:
      oprot.writeFieldBegin('followKugouId', TType.I64, 2)
      oprot.writeI64(self.followKugouId)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 3)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.addTime is not None:
      oprot.writeFieldBegin('addTime', TType.I32, 4)
      oprot.writeI32(self.addTime)
      oprot.writeFieldEnd()
    if self.isHasView is not None:
      oprot.writeFieldBegin('isHasView', TType.I32, 5)
      oprot.writeI32(self.isHasView)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I64, 6)
      oprot.writeI64(self.userId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.followKugouId)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.addTime)
    value = (value * 31) ^ hash(self.isHasView)
    value = (value * 31) ^ hash(self.userId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FollowsOfStarVO:
  """
  Attributes:
   - total
   - FollowsOfStar
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'FollowsOfStar', (TType.STRUCT,(UserFollowVO, UserFollowVO.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, FollowsOfStar=None,):
    self.total = total
    self.FollowsOfStar = FollowsOfStar

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.FollowsOfStar = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = UserFollowVO()
            _elem5.read(iprot)
            self.FollowsOfStar.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FollowsOfStarVO')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.FollowsOfStar is not None:
      oprot.writeFieldBegin('FollowsOfStar', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.FollowsOfStar))
      for iter6 in self.FollowsOfStar:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.total)
    value = (value * 31) ^ hash(self.FollowsOfStar)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SubscribeUserPhoneVO:
  """
  Attributes:
   - kugouId
   - phone
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.STRING, 'phone', None, None, ), # 2
  )

  def __init__(self, kugouId=None, phone=None,):
    self.kugouId = kugouId
    self.phone = phone

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.phone = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubscribeUserPhoneVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.phone is not None:
      oprot.writeFieldBegin('phone', TType.STRING, 2)
      oprot.writeString(self.phone)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.phone)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuardVO:
  """
  Attributes:
   - kugouId
   - recKugouId
   - guardLevel
   - guardIntegral
   - startTime
   - endTime
   - annualFee
   - annualFeeEndTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.I64, 'recKugouId', None, None, ), # 2
    (3, TType.I32, 'guardLevel', None, None, ), # 3
    (4, TType.I32, 'guardIntegral', None, None, ), # 4
    (5, TType.I32, 'startTime', None, None, ), # 5
    (6, TType.I32, 'endTime', None, None, ), # 6
    (7, TType.I32, 'annualFee', None, None, ), # 7
    (8, TType.I32, 'annualFeeEndTime', None, None, ), # 8
  )

  def __init__(self, kugouId=None, recKugouId=None, guardLevel=None, guardIntegral=None, startTime=None, endTime=None, annualFee=None, annualFeeEndTime=None,):
    self.kugouId = kugouId
    self.recKugouId = recKugouId
    self.guardLevel = guardLevel
    self.guardIntegral = guardIntegral
    self.startTime = startTime
    self.endTime = endTime
    self.annualFee = annualFee
    self.annualFeeEndTime = annualFeeEndTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.recKugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.guardLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.guardIntegral = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.annualFee = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.annualFeeEndTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuardVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.recKugouId is not None:
      oprot.writeFieldBegin('recKugouId', TType.I64, 2)
      oprot.writeI64(self.recKugouId)
      oprot.writeFieldEnd()
    if self.guardLevel is not None:
      oprot.writeFieldBegin('guardLevel', TType.I32, 3)
      oprot.writeI32(self.guardLevel)
      oprot.writeFieldEnd()
    if self.guardIntegral is not None:
      oprot.writeFieldBegin('guardIntegral', TType.I32, 4)
      oprot.writeI32(self.guardIntegral)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 5)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 6)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.annualFee is not None:
      oprot.writeFieldBegin('annualFee', TType.I32, 7)
      oprot.writeI32(self.annualFee)
      oprot.writeFieldEnd()
    if self.annualFeeEndTime is not None:
      oprot.writeFieldBegin('annualFeeEndTime', TType.I32, 8)
      oprot.writeI32(self.annualFeeEndTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.recKugouId)
    value = (value * 31) ^ hash(self.guardLevel)
    value = (value * 31) ^ hash(self.guardIntegral)
    value = (value * 31) ^ hash(self.startTime)
    value = (value * 31) ^ hash(self.endTime)
    value = (value * 31) ^ hash(self.annualFee)
    value = (value * 31) ^ hash(self.annualFeeEndTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserInfoVO:
  """
  Attributes:
   - userId
   - userName
   - kugouId
   - nickName
   - userLogo
   - sex
   - coin
   - roomId
   - starLevel
   - richLevel
   - constellation
   - liveTimes
   - location
   - followCount
   - fansCount
   - messageCount
   - level
   - cloaking
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.I64, 'kugouId', None, None, ), # 3
    (4, TType.STRING, 'nickName', None, None, ), # 4
    (5, TType.STRING, 'userLogo', None, None, ), # 5
    (6, TType.I32, 'sex', None, None, ), # 6
    (7, TType.DOUBLE, 'coin', None, None, ), # 7
    (8, TType.I32, 'roomId', None, None, ), # 8
    (9, TType.I32, 'starLevel', None, None, ), # 9
    (10, TType.I32, 'richLevel', None, None, ), # 10
    (11, TType.I32, 'constellation', None, None, ), # 11
    (12, TType.STRING, 'liveTimes', None, None, ), # 12
    (13, TType.STRING, 'location', None, None, ), # 13
    (14, TType.I32, 'followCount', None, None, ), # 14
    (15, TType.I32, 'fansCount', None, None, ), # 15
    (16, TType.I32, 'messageCount', None, None, ), # 16
    (17, TType.I32, 'level', None, None, ), # 17
    (18, TType.I32, 'cloaking', None, None, ), # 18
  )

  def __init__(self, userId=None, userName=None, kugouId=None, nickName=None, userLogo=None, sex=None, coin=None, roomId=None, starLevel=None, richLevel=None, constellation=None, liveTimes=None, location=None, followCount=None, fansCount=None, messageCount=None, level=None, cloaking=None,):
    self.userId = userId
    self.userName = userName
    self.kugouId = kugouId
    self.nickName = nickName
    self.userLogo = userLogo
    self.sex = sex
    self.coin = coin
    self.roomId = roomId
    self.starLevel = starLevel
    self.richLevel = richLevel
    self.constellation = constellation
    self.liveTimes = liveTimes
    self.location = location
    self.followCount = followCount
    self.fansCount = fansCount
    self.messageCount = messageCount
    self.level = level
    self.cloaking = cloaking

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.nickName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.userLogo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.sex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.coin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.roomId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.starLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.richLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.constellation = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.liveTimes = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.location = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.followCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.fansCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.messageCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.cloaking = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserInfoVO')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I64, 1)
      oprot.writeI64(self.userId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 3)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.nickName is not None:
      oprot.writeFieldBegin('nickName', TType.STRING, 4)
      oprot.writeString(self.nickName)
      oprot.writeFieldEnd()
    if self.userLogo is not None:
      oprot.writeFieldBegin('userLogo', TType.STRING, 5)
      oprot.writeString(self.userLogo)
      oprot.writeFieldEnd()
    if self.sex is not None:
      oprot.writeFieldBegin('sex', TType.I32, 6)
      oprot.writeI32(self.sex)
      oprot.writeFieldEnd()
    if self.coin is not None:
      oprot.writeFieldBegin('coin', TType.DOUBLE, 7)
      oprot.writeDouble(self.coin)
      oprot.writeFieldEnd()
    if self.roomId is not None:
      oprot.writeFieldBegin('roomId', TType.I32, 8)
      oprot.writeI32(self.roomId)
      oprot.writeFieldEnd()
    if self.starLevel is not None:
      oprot.writeFieldBegin('starLevel', TType.I32, 9)
      oprot.writeI32(self.starLevel)
      oprot.writeFieldEnd()
    if self.richLevel is not None:
      oprot.writeFieldBegin('richLevel', TType.I32, 10)
      oprot.writeI32(self.richLevel)
      oprot.writeFieldEnd()
    if self.constellation is not None:
      oprot.writeFieldBegin('constellation', TType.I32, 11)
      oprot.writeI32(self.constellation)
      oprot.writeFieldEnd()
    if self.liveTimes is not None:
      oprot.writeFieldBegin('liveTimes', TType.STRING, 12)
      oprot.writeString(self.liveTimes)
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.STRING, 13)
      oprot.writeString(self.location)
      oprot.writeFieldEnd()
    if self.followCount is not None:
      oprot.writeFieldBegin('followCount', TType.I32, 14)
      oprot.writeI32(self.followCount)
      oprot.writeFieldEnd()
    if self.fansCount is not None:
      oprot.writeFieldBegin('fansCount', TType.I32, 15)
      oprot.writeI32(self.fansCount)
      oprot.writeFieldEnd()
    if self.messageCount is not None:
      oprot.writeFieldBegin('messageCount', TType.I32, 16)
      oprot.writeI32(self.messageCount)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 17)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.cloaking is not None:
      oprot.writeFieldBegin('cloaking', TType.I32, 18)
      oprot.writeI32(self.cloaking)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.nickName)
    value = (value * 31) ^ hash(self.userLogo)
    value = (value * 31) ^ hash(self.sex)
    value = (value * 31) ^ hash(self.coin)
    value = (value * 31) ^ hash(self.roomId)
    value = (value * 31) ^ hash(self.starLevel)
    value = (value * 31) ^ hash(self.richLevel)
    value = (value * 31) ^ hash(self.constellation)
    value = (value * 31) ^ hash(self.liveTimes)
    value = (value * 31) ^ hash(self.location)
    value = (value * 31) ^ hash(self.followCount)
    value = (value * 31) ^ hash(self.fansCount)
    value = (value * 31) ^ hash(self.messageCount)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.cloaking)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TaskDebrisVO:
  """
  Attributes:
   - autoId
   - kugouId
   - starKugouId
   - updateTime
   - debrisNums
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'autoId', None, None, ), # 1
    (2, TType.I64, 'kugouId', None, None, ), # 2
    (3, TType.I64, 'starKugouId', None, None, ), # 3
    (4, TType.I64, 'updateTime', None, None, ), # 4
    (5, TType.I64, 'debrisNums', None, None, ), # 5
  )

  def __init__(self, autoId=None, kugouId=None, starKugouId=None, updateTime=None, debrisNums=None,):
    self.autoId = autoId
    self.kugouId = kugouId
    self.starKugouId = starKugouId
    self.updateTime = updateTime
    self.debrisNums = debrisNums

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.autoId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.starKugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.updateTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.debrisNums = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TaskDebrisVO')
    if self.autoId is not None:
      oprot.writeFieldBegin('autoId', TType.I64, 1)
      oprot.writeI64(self.autoId)
      oprot.writeFieldEnd()
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 2)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.starKugouId is not None:
      oprot.writeFieldBegin('starKugouId', TType.I64, 3)
      oprot.writeI64(self.starKugouId)
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.I64, 4)
      oprot.writeI64(self.updateTime)
      oprot.writeFieldEnd()
    if self.debrisNums is not None:
      oprot.writeFieldBegin('debrisNums', TType.I64, 5)
      oprot.writeI64(self.debrisNums)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.autoId)
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.starKugouId)
    value = (value * 31) ^ hash(self.updateTime)
    value = (value * 31) ^ hash(self.debrisNums)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MessageVO:
  """
  Attributes:
   - messageId
   - addTime
   - userId
   - fromUserId
   - content
   - kugouId
   - fromKugouId
   - nickName
   - userLogo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'messageId', None, None, ), # 1
    (2, TType.I64, 'addTime', None, None, ), # 2
    (3, TType.I64, 'userId', None, None, ), # 3
    (4, TType.I64, 'fromUserId', None, None, ), # 4
    (5, TType.STRING, 'content', None, None, ), # 5
    (6, TType.I64, 'kugouId', None, None, ), # 6
    (7, TType.I64, 'fromKugouId', None, None, ), # 7
    (8, TType.STRING, 'nickName', None, None, ), # 8
    (9, TType.STRING, 'userLogo', None, None, ), # 9
  )

  def __init__(self, messageId=None, addTime=None, userId=None, fromUserId=None, content=None, kugouId=None, fromKugouId=None, nickName=None, userLogo=None,):
    self.messageId = messageId
    self.addTime = addTime
    self.userId = userId
    self.fromUserId = fromUserId
    self.content = content
    self.kugouId = kugouId
    self.fromKugouId = fromKugouId
    self.nickName = nickName
    self.userLogo = userLogo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.messageId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.addTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.userId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.fromUserId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.fromKugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.nickName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.userLogo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MessageVO')
    if self.messageId is not None:
      oprot.writeFieldBegin('messageId', TType.I64, 1)
      oprot.writeI64(self.messageId)
      oprot.writeFieldEnd()
    if self.addTime is not None:
      oprot.writeFieldBegin('addTime', TType.I64, 2)
      oprot.writeI64(self.addTime)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I64, 3)
      oprot.writeI64(self.userId)
      oprot.writeFieldEnd()
    if self.fromUserId is not None:
      oprot.writeFieldBegin('fromUserId', TType.I64, 4)
      oprot.writeI64(self.fromUserId)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 5)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 6)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.fromKugouId is not None:
      oprot.writeFieldBegin('fromKugouId', TType.I64, 7)
      oprot.writeI64(self.fromKugouId)
      oprot.writeFieldEnd()
    if self.nickName is not None:
      oprot.writeFieldBegin('nickName', TType.STRING, 8)
      oprot.writeString(self.nickName)
      oprot.writeFieldEnd()
    if self.userLogo is not None:
      oprot.writeFieldBegin('userLogo', TType.STRING, 9)
      oprot.writeString(self.userLogo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.messageId)
    value = (value * 31) ^ hash(self.addTime)
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.fromUserId)
    value = (value * 31) ^ hash(self.content)
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.fromKugouId)
    value = (value * 31) ^ hash(self.nickName)
    value = (value * 31) ^ hash(self.userLogo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MessageForbidVO:
  """
  Attributes:
   - userId
   - status
   - kugouId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userId', None, None, ), # 1
    (2, TType.I32, 'status', None, None, ), # 2
    (3, TType.I64, 'kugouId', None, None, ), # 3
  )

  def __init__(self, userId=None, status=None, kugouId=None,):
    self.userId = userId
    self.status = status
    self.kugouId = kugouId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MessageForbidVO')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I64, 1)
      oprot.writeI64(self.userId)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 2)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 3)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.kugouId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GiftStarVO:
  """
  Attributes:
   - userId
   - kugouId
   - starCount
   - lastTime
   - getStarNum
   - sendCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userId', None, None, ), # 1
    (2, TType.I64, 'kugouId', None, None, ), # 2
    (3, TType.I64, 'starCount', None, None, ), # 3
    (4, TType.I64, 'lastTime', None, None, ), # 4
    (5, TType.I64, 'getStarNum', None, None, ), # 5
    (6, TType.I64, 'sendCount', None, None, ), # 6
  )

  def __init__(self, userId=None, kugouId=None, starCount=None, lastTime=None, getStarNum=None, sendCount=None,):
    self.userId = userId
    self.kugouId = kugouId
    self.starCount = starCount
    self.lastTime = lastTime
    self.getStarNum = getStarNum
    self.sendCount = sendCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.starCount = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.lastTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.getStarNum = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.sendCount = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GiftStarVO')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I64, 1)
      oprot.writeI64(self.userId)
      oprot.writeFieldEnd()
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 2)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.starCount is not None:
      oprot.writeFieldBegin('starCount', TType.I64, 3)
      oprot.writeI64(self.starCount)
      oprot.writeFieldEnd()
    if self.lastTime is not None:
      oprot.writeFieldBegin('lastTime', TType.I64, 4)
      oprot.writeI64(self.lastTime)
      oprot.writeFieldEnd()
    if self.getStarNum is not None:
      oprot.writeFieldBegin('getStarNum', TType.I64, 5)
      oprot.writeI64(self.getStarNum)
      oprot.writeFieldEnd()
    if self.sendCount is not None:
      oprot.writeFieldBegin('sendCount', TType.I64, 6)
      oprot.writeI64(self.sendCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.starCount)
    value = (value * 31) ^ hash(self.lastTime)
    value = (value * 31) ^ hash(self.getStarNum)
    value = (value * 31) ^ hash(self.sendCount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserDayRecordVO:
  """
  Attributes:
   - kugouId
   - precent
   - addTime
   - userRecordLog
   - pid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.I32, 'precent', None, None, ), # 2
    (3, TType.I64, 'addTime', None, None, ), # 3
    (4, TType.STRING, 'userRecordLog', None, None, ), # 4
    (5, TType.I32, 'pid', None, None, ), # 5
  )

  def __init__(self, kugouId=None, precent=None, addTime=None, userRecordLog=None, pid=None,):
    self.kugouId = kugouId
    self.precent = precent
    self.addTime = addTime
    self.userRecordLog = userRecordLog
    self.pid = pid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.precent = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.addTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.userRecordLog = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.pid = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserDayRecordVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.precent is not None:
      oprot.writeFieldBegin('precent', TType.I32, 2)
      oprot.writeI32(self.precent)
      oprot.writeFieldEnd()
    if self.addTime is not None:
      oprot.writeFieldBegin('addTime', TType.I64, 3)
      oprot.writeI64(self.addTime)
      oprot.writeFieldEnd()
    if self.userRecordLog is not None:
      oprot.writeFieldBegin('userRecordLog', TType.STRING, 4)
      oprot.writeString(self.userRecordLog)
      oprot.writeFieldEnd()
    if self.pid is not None:
      oprot.writeFieldBegin('pid', TType.I32, 5)
      oprot.writeI32(self.pid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.precent)
    value = (value * 31) ^ hash(self.addTime)
    value = (value * 31) ^ hash(self.userRecordLog)
    value = (value * 31) ^ hash(self.pid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserSignInVO:
  """
  Attributes:
   - dayRecordMobile
   - dayRecordWeb
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'dayRecordMobile', (UserDayRecordVO, UserDayRecordVO.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'dayRecordWeb', (UserDayRecordVO, UserDayRecordVO.thrift_spec), None, ), # 2
  )

  def __init__(self, dayRecordMobile=None, dayRecordWeb=None,):
    self.dayRecordMobile = dayRecordMobile
    self.dayRecordWeb = dayRecordWeb

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.dayRecordMobile = UserDayRecordVO()
          self.dayRecordMobile.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dayRecordWeb = UserDayRecordVO()
          self.dayRecordWeb.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserSignInVO')
    if self.dayRecordMobile is not None:
      oprot.writeFieldBegin('dayRecordMobile', TType.STRUCT, 1)
      self.dayRecordMobile.write(oprot)
      oprot.writeFieldEnd()
    if self.dayRecordWeb is not None:
      oprot.writeFieldBegin('dayRecordWeb', TType.STRUCT, 2)
      self.dayRecordWeb.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dayRecordMobile)
    value = (value * 31) ^ hash(self.dayRecordWeb)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DailyRecordConfigVO:
  """
  Attributes:
   - days
   - awardOption1
   - awardOption2
   - awardOption3
   - awardOption4
   - awardOption5
   - awardOption6
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'days', None, None, ), # 1
    (2, TType.STRING, 'awardOption1', None, None, ), # 2
    (3, TType.STRING, 'awardOption2', None, None, ), # 3
    (4, TType.STRING, 'awardOption3', None, None, ), # 4
    (5, TType.STRING, 'awardOption4', None, None, ), # 5
    (6, TType.STRING, 'awardOption5', None, None, ), # 6
    (7, TType.STRING, 'awardOption6', None, None, ), # 7
  )

  def __init__(self, days=None, awardOption1=None, awardOption2=None, awardOption3=None, awardOption4=None, awardOption5=None, awardOption6=None,):
    self.days = days
    self.awardOption1 = awardOption1
    self.awardOption2 = awardOption2
    self.awardOption3 = awardOption3
    self.awardOption4 = awardOption4
    self.awardOption5 = awardOption5
    self.awardOption6 = awardOption6

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.days = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.awardOption1 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.awardOption2 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.awardOption3 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.awardOption4 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.awardOption5 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.awardOption6 = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DailyRecordConfigVO')
    if self.days is not None:
      oprot.writeFieldBegin('days', TType.I32, 1)
      oprot.writeI32(self.days)
      oprot.writeFieldEnd()
    if self.awardOption1 is not None:
      oprot.writeFieldBegin('awardOption1', TType.STRING, 2)
      oprot.writeString(self.awardOption1)
      oprot.writeFieldEnd()
    if self.awardOption2 is not None:
      oprot.writeFieldBegin('awardOption2', TType.STRING, 3)
      oprot.writeString(self.awardOption2)
      oprot.writeFieldEnd()
    if self.awardOption3 is not None:
      oprot.writeFieldBegin('awardOption3', TType.STRING, 4)
      oprot.writeString(self.awardOption3)
      oprot.writeFieldEnd()
    if self.awardOption4 is not None:
      oprot.writeFieldBegin('awardOption4', TType.STRING, 5)
      oprot.writeString(self.awardOption4)
      oprot.writeFieldEnd()
    if self.awardOption5 is not None:
      oprot.writeFieldBegin('awardOption5', TType.STRING, 6)
      oprot.writeString(self.awardOption5)
      oprot.writeFieldEnd()
    if self.awardOption6 is not None:
      oprot.writeFieldBegin('awardOption6', TType.STRING, 7)
      oprot.writeString(self.awardOption6)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.days)
    value = (value * 31) ^ hash(self.awardOption1)
    value = (value * 31) ^ hash(self.awardOption2)
    value = (value * 31) ^ hash(self.awardOption3)
    value = (value * 31) ^ hash(self.awardOption4)
    value = (value * 31) ^ hash(self.awardOption5)
    value = (value * 31) ^ hash(self.awardOption6)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserDayRecordTotalVO:
  """
  Attributes:
   - kugouId
   - recordTotalCount
   - lastSignTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.I32, 'recordTotalCount', None, None, ), # 2
    (3, TType.I64, 'lastSignTime', None, None, ), # 3
  )

  def __init__(self, kugouId=None, recordTotalCount=None, lastSignTime=None,):
    self.kugouId = kugouId
    self.recordTotalCount = recordTotalCount
    self.lastSignTime = lastSignTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.recordTotalCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.lastSignTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserDayRecordTotalVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.recordTotalCount is not None:
      oprot.writeFieldBegin('recordTotalCount', TType.I32, 2)
      oprot.writeI32(self.recordTotalCount)
      oprot.writeFieldEnd()
    if self.lastSignTime is not None:
      oprot.writeFieldBegin('lastSignTime', TType.I64, 3)
      oprot.writeI64(self.lastSignTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.recordTotalCount)
    value = (value * 31) ^ hash(self.lastSignTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserDayRecordUpdateVO:
  """
  Attributes:
   - pid
   - kugouId
   - precent
   - signInDay
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'pid', None, None, ), # 1
    (2, TType.I64, 'kugouId', None, None, ), # 2
    (3, TType.I32, 'precent', None, None, ), # 3
    (4, TType.STRING, 'signInDay', None, None, ), # 4
  )

  def __init__(self, pid=None, kugouId=None, precent=None, signInDay=None,):
    self.pid = pid
    self.kugouId = kugouId
    self.precent = precent
    self.signInDay = signInDay

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.pid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.precent = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.signInDay = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserDayRecordUpdateVO')
    if self.pid is not None:
      oprot.writeFieldBegin('pid', TType.I32, 1)
      oprot.writeI32(self.pid)
      oprot.writeFieldEnd()
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 2)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.precent is not None:
      oprot.writeFieldBegin('precent', TType.I32, 3)
      oprot.writeI32(self.precent)
      oprot.writeFieldEnd()
    if self.signInDay is not None:
      oprot.writeFieldBegin('signInDay', TType.STRING, 4)
      oprot.writeString(self.signInDay)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.pid)
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.precent)
    value = (value * 31) ^ hash(self.signInDay)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserDayRecordAwardLog:
  """
  Attributes:
   - id
   - kugouId
   - pid
   - addTime
   - awardInfo
   - status
   - actionType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'kugouId', None, None, ), # 2
    (3, TType.I32, 'pid', None, None, ), # 3
    (4, TType.I64, 'addTime', None, None, ), # 4
    (5, TType.STRING, 'awardInfo', None, None, ), # 5
    (6, TType.I32, 'status', None, None, ), # 6
    (7, TType.I32, 'actionType', None, None, ), # 7
  )

  def __init__(self, id=None, kugouId=None, pid=None, addTime=None, awardInfo=None, status=None, actionType=None,):
    self.id = id
    self.kugouId = kugouId
    self.pid = pid
    self.addTime = addTime
    self.awardInfo = awardInfo
    self.status = status
    self.actionType = actionType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.pid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.addTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.awardInfo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.actionType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserDayRecordAwardLog')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 2)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.pid is not None:
      oprot.writeFieldBegin('pid', TType.I32, 3)
      oprot.writeI32(self.pid)
      oprot.writeFieldEnd()
    if self.addTime is not None:
      oprot.writeFieldBegin('addTime', TType.I64, 4)
      oprot.writeI64(self.addTime)
      oprot.writeFieldEnd()
    if self.awardInfo is not None:
      oprot.writeFieldBegin('awardInfo', TType.STRING, 5)
      oprot.writeString(self.awardInfo)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 6)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.actionType is not None:
      oprot.writeFieldBegin('actionType', TType.I32, 7)
      oprot.writeI32(self.actionType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.pid)
    value = (value * 31) ^ hash(self.addTime)
    value = (value * 31) ^ hash(self.awardInfo)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.actionType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserMountInRoomVO:
  """
  Attributes:
   - userId
   - userKugouId
   - nickName
   - userLogo
   - richLevel
   - richLevelIcon
   - mountId
   - mountImageInRoom
   - mountPricePerMonth
   - mountName
   - mountImageInShop
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userId', None, None, ), # 1
    (2, TType.I64, 'userKugouId', None, None, ), # 2
    (3, TType.STRING, 'nickName', None, None, ), # 3
    (4, TType.STRING, 'userLogo', None, None, ), # 4
    (5, TType.I32, 'richLevel', None, None, ), # 5
    (6, TType.STRING, 'richLevelIcon', None, None, ), # 6
    (7, TType.I32, 'mountId', None, None, ), # 7
    (8, TType.STRING, 'mountImageInRoom', None, None, ), # 8
    (9, TType.I32, 'mountPricePerMonth', None, None, ), # 9
    (10, TType.STRING, 'mountName', None, None, ), # 10
    (11, TType.STRING, 'mountImageInShop', None, None, ), # 11
  )

  def __init__(self, userId=None, userKugouId=None, nickName=None, userLogo=None, richLevel=None, richLevelIcon=None, mountId=None, mountImageInRoom=None, mountPricePerMonth=None, mountName=None, mountImageInShop=None,):
    self.userId = userId
    self.userKugouId = userKugouId
    self.nickName = nickName
    self.userLogo = userLogo
    self.richLevel = richLevel
    self.richLevelIcon = richLevelIcon
    self.mountId = mountId
    self.mountImageInRoom = mountImageInRoom
    self.mountPricePerMonth = mountPricePerMonth
    self.mountName = mountName
    self.mountImageInShop = mountImageInShop

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userKugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.nickName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.userLogo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.richLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.richLevelIcon = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.mountId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.mountImageInRoom = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.mountPricePerMonth = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.mountName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.mountImageInShop = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserMountInRoomVO')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I64, 1)
      oprot.writeI64(self.userId)
      oprot.writeFieldEnd()
    if self.userKugouId is not None:
      oprot.writeFieldBegin('userKugouId', TType.I64, 2)
      oprot.writeI64(self.userKugouId)
      oprot.writeFieldEnd()
    if self.nickName is not None:
      oprot.writeFieldBegin('nickName', TType.STRING, 3)
      oprot.writeString(self.nickName)
      oprot.writeFieldEnd()
    if self.userLogo is not None:
      oprot.writeFieldBegin('userLogo', TType.STRING, 4)
      oprot.writeString(self.userLogo)
      oprot.writeFieldEnd()
    if self.richLevel is not None:
      oprot.writeFieldBegin('richLevel', TType.I32, 5)
      oprot.writeI32(self.richLevel)
      oprot.writeFieldEnd()
    if self.richLevelIcon is not None:
      oprot.writeFieldBegin('richLevelIcon', TType.STRING, 6)
      oprot.writeString(self.richLevelIcon)
      oprot.writeFieldEnd()
    if self.mountId is not None:
      oprot.writeFieldBegin('mountId', TType.I32, 7)
      oprot.writeI32(self.mountId)
      oprot.writeFieldEnd()
    if self.mountImageInRoom is not None:
      oprot.writeFieldBegin('mountImageInRoom', TType.STRING, 8)
      oprot.writeString(self.mountImageInRoom)
      oprot.writeFieldEnd()
    if self.mountPricePerMonth is not None:
      oprot.writeFieldBegin('mountPricePerMonth', TType.I32, 9)
      oprot.writeI32(self.mountPricePerMonth)
      oprot.writeFieldEnd()
    if self.mountName is not None:
      oprot.writeFieldBegin('mountName', TType.STRING, 10)
      oprot.writeString(self.mountName)
      oprot.writeFieldEnd()
    if self.mountImageInShop is not None:
      oprot.writeFieldBegin('mountImageInShop', TType.STRING, 11)
      oprot.writeString(self.mountImageInShop)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.userKugouId)
    value = (value * 31) ^ hash(self.nickName)
    value = (value * 31) ^ hash(self.userLogo)
    value = (value * 31) ^ hash(self.richLevel)
    value = (value * 31) ^ hash(self.richLevelIcon)
    value = (value * 31) ^ hash(self.mountId)
    value = (value * 31) ^ hash(self.mountImageInRoom)
    value = (value * 31) ^ hash(self.mountPricePerMonth)
    value = (value * 31) ^ hash(self.mountName)
    value = (value * 31) ^ hash(self.mountImageInShop)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
