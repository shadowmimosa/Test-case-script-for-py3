#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#
#_*_ coding:utf-8 _*_
from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class StarVO:
  """
  Attributes:
   - kugouId
   - nickName
   - isSign
   - signTime
   - roomId
   - status
   - publicMesg
   - privateMesg
   - publicMesgUrl
   - privateMesgUrl
   - video
   - background
   - starType
   - companyName
   - actionType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.STRING, 'nickName', None, None, ), # 2
    (3, TType.I32, 'isSign', None, None, ), # 3
    (4, TType.I64, 'signTime', None, None, ), # 4
    (5, TType.I64, 'roomId', None, None, ), # 5
    (6, TType.I32, 'status', None, None, ), # 6
    (7, TType.STRING, 'publicMesg', None, None, ), # 7
    (8, TType.STRING, 'privateMesg', None, None, ), # 8
    (9, TType.STRING, 'publicMesgUrl', None, None, ), # 9
    (10, TType.STRING, 'privateMesgUrl', None, None, ), # 10
    (11, TType.STRING, 'video', None, None, ), # 11
    (12, TType.STRING, 'background', None, None, ), # 12
    (13, TType.I32, 'starType', None, None, ), # 13
    (14, TType.STRING, 'companyName', None, None, ), # 14
    (15, TType.I32, 'actionType', None, None, ), # 15
  )

  def __init__(self, kugouId=None, nickName=None, isSign=None, signTime=None, roomId=None, status=None, publicMesg=None, privateMesg=None, publicMesgUrl=None, privateMesgUrl=None, video=None, background=None, starType=None, companyName=None, actionType=None,):
    self.kugouId = kugouId
    self.nickName = nickName
    self.isSign = isSign
    self.signTime = signTime
    self.roomId = roomId
    self.status = status
    self.publicMesg = publicMesg
    self.privateMesg = privateMesg
    self.publicMesgUrl = publicMesgUrl
    self.privateMesgUrl = privateMesgUrl
    self.video = video
    self.background = background
    self.starType = starType
    self.companyName = companyName
    self.actionType = actionType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.nickName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.isSign = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.signTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.roomId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.publicMesg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.privateMesg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.publicMesgUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.privateMesgUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.video = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.background = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.starType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.companyName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.actionType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StarVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.nickName is not None:
      oprot.writeFieldBegin('nickName', TType.STRING, 2)
      oprot.writeString(self.nickName)
      oprot.writeFieldEnd()
    if self.isSign is not None:
      oprot.writeFieldBegin('isSign', TType.I32, 3)
      oprot.writeI32(self.isSign)
      oprot.writeFieldEnd()
    if self.signTime is not None:
      oprot.writeFieldBegin('signTime', TType.I64, 4)
      oprot.writeI64(self.signTime)
      oprot.writeFieldEnd()
    if self.roomId is not None:
      oprot.writeFieldBegin('roomId', TType.I64, 5)
      oprot.writeI64(self.roomId)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 6)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.publicMesg is not None:
      oprot.writeFieldBegin('publicMesg', TType.STRING, 7)
      oprot.writeString(self.publicMesg)
      oprot.writeFieldEnd()
    if self.privateMesg is not None:
      oprot.writeFieldBegin('privateMesg', TType.STRING, 8)
      oprot.writeString(self.privateMesg)
      oprot.writeFieldEnd()
    if self.publicMesgUrl is not None:
      oprot.writeFieldBegin('publicMesgUrl', TType.STRING, 9)
      oprot.writeString(self.publicMesgUrl)
      oprot.writeFieldEnd()
    if self.privateMesgUrl is not None:
      oprot.writeFieldBegin('privateMesgUrl', TType.STRING, 10)
      oprot.writeString(self.privateMesgUrl)
      oprot.writeFieldEnd()
    if self.video is not None:
      oprot.writeFieldBegin('video', TType.STRING, 11)
      oprot.writeString(self.video)
      oprot.writeFieldEnd()
    if self.background is not None:
      oprot.writeFieldBegin('background', TType.STRING, 12)
      oprot.writeString(self.background)
      oprot.writeFieldEnd()
    if self.starType is not None:
      oprot.writeFieldBegin('starType', TType.I32, 13)
      oprot.writeI32(self.starType)
      oprot.writeFieldEnd()
    if self.companyName is not None:
      oprot.writeFieldBegin('companyName', TType.STRING, 14)
      oprot.writeString(self.companyName)
      oprot.writeFieldEnd()
    if self.actionType is not None:
      oprot.writeFieldBegin('actionType', TType.I32, 15)
      oprot.writeI32(self.actionType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.nickName)
    value = (value * 31) ^ hash(self.isSign)
    value = (value * 31) ^ hash(self.signTime)
    value = (value * 31) ^ hash(self.roomId)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.publicMesg)
    value = (value * 31) ^ hash(self.privateMesg)
    value = (value * 31) ^ hash(self.publicMesgUrl)
    value = (value * 31) ^ hash(self.privateMesgUrl)
    value = (value * 31) ^ hash(self.video)
    value = (value * 31) ^ hash(self.background)
    value = (value * 31) ^ hash(self.starType)
    value = (value * 31) ^ hash(self.companyName)
    value = (value * 31) ^ hash(self.actionType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StarSongLibVO:
  """
  Attributes:
   - songId
   - kugouId
   - singerName
   - songName
   - hash
   - playDuration
   - addTime
   - actionType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'songId', None, None, ), # 1
    (2, TType.I64, 'kugouId', None, None, ), # 2
    (3, TType.STRING, 'singerName', None, None, ), # 3
    (4, TType.STRING, 'songName', None, None, ), # 4
    (5, TType.STRING, 'hash', None, None, ), # 5
    (6, TType.I64, 'playDuration', None, None, ), # 6
    (7, TType.I64, 'addTime', None, None, ), # 7
    (8, TType.I32, 'actionType', None, None, ), # 8
  )

  def __init__(self, songId=None, kugouId=None, singerName=None, songName=None, hash=None, playDuration=None, addTime=None, actionType=None,):
    self.songId = songId
    self.kugouId = kugouId
    self.singerName = singerName
    self.songName = songName
    self.hash = hash
    self.playDuration = playDuration
    self.addTime = addTime
    self.actionType = actionType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.songId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.singerName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.songName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.hash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.playDuration = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.addTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.actionType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StarSongLibVO')
    if self.songId is not None:
      oprot.writeFieldBegin('songId', TType.I64, 1)
      oprot.writeI64(self.songId)
      oprot.writeFieldEnd()
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 2)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.singerName is not None:
      oprot.writeFieldBegin('singerName', TType.STRING, 3)
      oprot.writeString(self.singerName)
      oprot.writeFieldEnd()
    if self.songName is not None:
      oprot.writeFieldBegin('songName', TType.STRING, 4)
      oprot.writeString(self.songName)
      oprot.writeFieldEnd()
    if self.hash is not None:
      oprot.writeFieldBegin('hash', TType.STRING, 5)
      oprot.writeString(self.hash)
      oprot.writeFieldEnd()
    if self.playDuration is not None:
      oprot.writeFieldBegin('playDuration', TType.I64, 6)
      oprot.writeI64(self.playDuration)
      oprot.writeFieldEnd()
    if self.addTime is not None:
      oprot.writeFieldBegin('addTime', TType.I64, 7)
      oprot.writeI64(self.addTime)
      oprot.writeFieldEnd()
    if self.actionType is not None:
      oprot.writeFieldBegin('actionType', TType.I32, 8)
      oprot.writeI32(self.actionType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.songId)
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.singerName)
    value = (value * 31) ^ hash(self.songName)
    value = (value * 31) ^ hash(self.hash)
    value = (value * 31) ^ hash(self.playDuration)
    value = (value * 31) ^ hash(self.addTime)
    value = (value * 31) ^ hash(self.actionType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StarUserTagsVO:
  """
  Attributes:
   - kugouId
   - starTagsId
   - starTagsName
   - addTime
   - actionType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.I32, 'starTagsId', None, None, ), # 2
    (3, TType.STRING, 'starTagsName', None, None, ), # 3
    (4, TType.I32, 'addTime', None, None, ), # 4
    (5, TType.I32, 'actionType', None, None, ), # 5
  )

  def __init__(self, kugouId=None, starTagsId=None, starTagsName=None, addTime=None, actionType=None,):
    self.kugouId = kugouId
    self.starTagsId = starTagsId
    self.starTagsName = starTagsName
    self.addTime = addTime
    self.actionType = actionType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.starTagsId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.starTagsName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.addTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.actionType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StarUserTagsVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.starTagsId is not None:
      oprot.writeFieldBegin('starTagsId', TType.I32, 2)
      oprot.writeI32(self.starTagsId)
      oprot.writeFieldEnd()
    if self.starTagsName is not None:
      oprot.writeFieldBegin('starTagsName', TType.STRING, 3)
      oprot.writeString(self.starTagsName)
      oprot.writeFieldEnd()
    if self.addTime is not None:
      oprot.writeFieldBegin('addTime', TType.I32, 4)
      oprot.writeI32(self.addTime)
      oprot.writeFieldEnd()
    if self.actionType is not None:
      oprot.writeFieldBegin('actionType', TType.I32, 5)
      oprot.writeI32(self.actionType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.starTagsId)
    value = (value * 31) ^ hash(self.starTagsName)
    value = (value * 31) ^ hash(self.addTime)
    value = (value * 31) ^ hash(self.actionType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExclusiveStarVO:
  """
  Attributes:
   - kugouId
   - status
   - addtime
   - actionType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.I32, 'status', None, None, ), # 2
    (3, TType.I64, 'addtime', None, None, ), # 3
    (4, TType.I32, 'actionType', None, None, ), # 4
  )

  def __init__(self, kugouId=None, status=None, addtime=None, actionType=None,):
    self.kugouId = kugouId
    self.status = status
    self.addtime = addtime
    self.actionType = actionType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.addtime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.actionType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExclusiveStarVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 2)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.addtime is not None:
      oprot.writeFieldBegin('addtime', TType.I64, 3)
      oprot.writeI64(self.addtime)
      oprot.writeFieldEnd()
    if self.actionType is not None:
      oprot.writeFieldBegin('actionType', TType.I32, 4)
      oprot.writeI32(self.actionType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.addtime)
    value = (value * 31) ^ hash(self.actionType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StarLevelLogVO:
  """
  Attributes:
   - addTime
   - kugouId
   - starLevel
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'addTime', None, None, ), # 1
    (2, TType.I64, 'kugouId', None, None, ), # 2
    (3, TType.I32, 'starLevel', None, None, ), # 3
  )

  def __init__(self, addTime=None, kugouId=None, starLevel=None,):
    self.addTime = addTime
    self.kugouId = kugouId
    self.starLevel = starLevel

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.addTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.starLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StarLevelLogVO')
    if self.addTime is not None:
      oprot.writeFieldBegin('addTime', TType.I32, 1)
      oprot.writeI32(self.addTime)
      oprot.writeFieldEnd()
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 2)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.starLevel is not None:
      oprot.writeFieldBegin('starLevel', TType.I32, 3)
      oprot.writeI32(self.starLevel)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.addTime)
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.starLevel)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StarCardVO:
  """
  Attributes:
   - kugouId
   - expireTime
   - status
   - receiveGiftTime
   - getGiftStartTime
   - actionType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.I64, 'expireTime', None, None, ), # 2
    (3, TType.I32, 'status', None, None, ), # 3
    (4, TType.I64, 'receiveGiftTime', None, None, ), # 4
    (5, TType.I64, 'getGiftStartTime', None, None, ), # 5
    (6, TType.I32, 'actionType', None, None, ), # 6
  )

  def __init__(self, kugouId=None, expireTime=None, status=None, receiveGiftTime=None, getGiftStartTime=None, actionType=None,):
    self.kugouId = kugouId
    self.expireTime = expireTime
    self.status = status
    self.receiveGiftTime = receiveGiftTime
    self.getGiftStartTime = getGiftStartTime
    self.actionType = actionType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.expireTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.receiveGiftTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.getGiftStartTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.actionType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StarCardVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.expireTime is not None:
      oprot.writeFieldBegin('expireTime', TType.I64, 2)
      oprot.writeI64(self.expireTime)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 3)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.receiveGiftTime is not None:
      oprot.writeFieldBegin('receiveGiftTime', TType.I64, 4)
      oprot.writeI64(self.receiveGiftTime)
      oprot.writeFieldEnd()
    if self.getGiftStartTime is not None:
      oprot.writeFieldBegin('getGiftStartTime', TType.I64, 5)
      oprot.writeI64(self.getGiftStartTime)
      oprot.writeFieldEnd()
    if self.actionType is not None:
      oprot.writeFieldBegin('actionType', TType.I32, 6)
      oprot.writeI32(self.actionType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.expireTime)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.receiveGiftTime)
    value = (value * 31) ^ hash(self.getGiftStartTime)
    value = (value * 31) ^ hash(self.actionType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StarCardReceiveGiftVO:
  """
  Attributes:
   - autoId
   - kugouId
   - giftId
   - giftNum
   - luckyGiftId
   - luckyGiftTpye
   - addTime
   - actionType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'autoId', None, None, ), # 1
    (2, TType.I64, 'kugouId', None, None, ), # 2
    (3, TType.I64, 'giftId', None, None, ), # 3
    (4, TType.I64, 'giftNum', None, None, ), # 4
    (5, TType.I64, 'luckyGiftId', None, None, ), # 5
    (6, TType.STRING, 'luckyGiftTpye', None, None, ), # 6
    (7, TType.I64, 'addTime', None, None, ), # 7
    (8, TType.I32, 'actionType', None, None, ), # 8
  )

  def __init__(self, autoId=None, kugouId=None, giftId=None, giftNum=None, luckyGiftId=None, luckyGiftTpye=None, addTime=None, actionType=None,):
    self.autoId = autoId
    self.kugouId = kugouId
    self.giftId = giftId
    self.giftNum = giftNum
    self.luckyGiftId = luckyGiftId
    self.luckyGiftTpye = luckyGiftTpye
    self.addTime = addTime
    self.actionType = actionType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.autoId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.giftId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.giftNum = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.luckyGiftId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.luckyGiftTpye = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.addTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.actionType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StarCardReceiveGiftVO')
    if self.autoId is not None:
      oprot.writeFieldBegin('autoId', TType.I64, 1)
      oprot.writeI64(self.autoId)
      oprot.writeFieldEnd()
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 2)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.giftId is not None:
      oprot.writeFieldBegin('giftId', TType.I64, 3)
      oprot.writeI64(self.giftId)
      oprot.writeFieldEnd()
    if self.giftNum is not None:
      oprot.writeFieldBegin('giftNum', TType.I64, 4)
      oprot.writeI64(self.giftNum)
      oprot.writeFieldEnd()
    if self.luckyGiftId is not None:
      oprot.writeFieldBegin('luckyGiftId', TType.I64, 5)
      oprot.writeI64(self.luckyGiftId)
      oprot.writeFieldEnd()
    if self.luckyGiftTpye is not None:
      oprot.writeFieldBegin('luckyGiftTpye', TType.STRING, 6)
      oprot.writeString(self.luckyGiftTpye)
      oprot.writeFieldEnd()
    if self.addTime is not None:
      oprot.writeFieldBegin('addTime', TType.I64, 7)
      oprot.writeI64(self.addTime)
      oprot.writeFieldEnd()
    if self.actionType is not None:
      oprot.writeFieldBegin('actionType', TType.I32, 8)
      oprot.writeI32(self.actionType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.autoId)
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.giftId)
    value = (value * 31) ^ hash(self.giftNum)
    value = (value * 31) ^ hash(self.luckyGiftId)
    value = (value * 31) ^ hash(self.luckyGiftTpye)
    value = (value * 31) ^ hash(self.addTime)
    value = (value * 31) ^ hash(self.actionType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StarSignTimeVO:
  """
  Attributes:
   - kugouId
   - signTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.I64, 'signTime', None, None, ), # 2
  )

  def __init__(self, kugouId=None, signTime=None,):
    self.kugouId = kugouId
    self.signTime = signTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.signTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StarSignTimeVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.signTime is not None:
      oprot.writeFieldBegin('signTime', TType.I64, 2)
      oprot.writeI64(self.signTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.signTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StarUpsIsTopVO:
  """
  Attributes:
   - kugouId
   - ups
   - isTop
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.I64, 'ups', None, None, ), # 2
    (3, TType.I32, 'isTop', None, None, ), # 3
  )

  def __init__(self, kugouId=None, ups=None, isTop=None,):
    self.kugouId = kugouId
    self.ups = ups
    self.isTop = isTop

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.ups = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.isTop = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StarUpsIsTopVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.ups is not None:
      oprot.writeFieldBegin('ups', TType.I64, 2)
      oprot.writeI64(self.ups)
      oprot.writeFieldEnd()
    if self.isTop is not None:
      oprot.writeFieldBegin('isTop', TType.I32, 3)
      oprot.writeI32(self.isTop)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.ups)
    value = (value * 31) ^ hash(self.isTop)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StarInfoVO:
  """
  Attributes:
   - status
   - starCardStatus
   - receiveGiftTime
   - startTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'status', None, None, ), # 1
    (2, TType.I32, 'starCardStatus', None, None, ), # 2
    (3, TType.I64, 'receiveGiftTime', None, None, ), # 3
    (4, TType.I32, 'startTime', None, None, ), # 4
  )

  def __init__(self, status=None, starCardStatus=None, receiveGiftTime=None, startTime=None,):
    self.status = status
    self.starCardStatus = starCardStatus
    self.receiveGiftTime = receiveGiftTime
    self.startTime = startTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.starCardStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.receiveGiftTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StarInfoVO')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 1)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.starCardStatus is not None:
      oprot.writeFieldBegin('starCardStatus', TType.I32, 2)
      oprot.writeI32(self.starCardStatus)
      oprot.writeFieldEnd()
    if self.receiveGiftTime is not None:
      oprot.writeFieldBegin('receiveGiftTime', TType.I64, 3)
      oprot.writeI64(self.receiveGiftTime)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 4)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.starCardStatus)
    value = (value * 31) ^ hash(self.receiveGiftTime)
    value = (value * 31) ^ hash(self.startTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StarHonorVO:
  """
  Attributes:
   - kugouId
   - type
   - rank
   - image
   - time
   - content
   - giftId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.STRING, 'type', None, None, ), # 2
    (3, TType.I32, 'rank', None, None, ), # 3
    (4, TType.STRING, 'image', None, None, ), # 4
    (5, TType.I64, 'time', None, None, ), # 5
    (6, TType.STRING, 'content', None, None, ), # 6
    (7, TType.I64, 'giftId', None, None, ), # 7
  )

  def __init__(self, kugouId=None, type=None, rank=None, image=None, time=None, content=None, giftId=None,):
    self.kugouId = kugouId
    self.type = type
    self.rank = rank
    self.image = image
    self.time = time
    self.content = content
    self.giftId = giftId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.rank = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.image = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.giftId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StarHonorVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 2)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.rank is not None:
      oprot.writeFieldBegin('rank', TType.I32, 3)
      oprot.writeI32(self.rank)
      oprot.writeFieldEnd()
    if self.image is not None:
      oprot.writeFieldBegin('image', TType.STRING, 4)
      oprot.writeString(self.image)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I64, 5)
      oprot.writeI64(self.time)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 6)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.giftId is not None:
      oprot.writeFieldBegin('giftId', TType.I64, 7)
      oprot.writeI64(self.giftId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.rank)
    value = (value * 31) ^ hash(self.image)
    value = (value * 31) ^ hash(self.time)
    value = (value * 31) ^ hash(self.content)
    value = (value * 31) ^ hash(self.giftId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StarWeekGiftVO:
  """
  Attributes:
   - giftId
   - giftName
   - giftIcon
   - isWeekStarGift
   - isSuperStarGift
   - giftCount
   - rank
   - gapnum
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'giftId', None, None, ), # 1
    (2, TType.STRING, 'giftName', None, None, ), # 2
    (3, TType.STRING, 'giftIcon', None, None, ), # 3
    (4, TType.I32, 'isWeekStarGift', None, None, ), # 4
    (5, TType.I32, 'isSuperStarGift', None, None, ), # 5
    (6, TType.I32, 'giftCount', None, None, ), # 6
    (7, TType.I32, 'rank', None, None, ), # 7
    (8, TType.I32, 'gapnum', None, None, ), # 8
  )

  def __init__(self, giftId=None, giftName=None, giftIcon=None, isWeekStarGift=None, isSuperStarGift=None, giftCount=None, rank=None, gapnum=None,):
    self.giftId = giftId
    self.giftName = giftName
    self.giftIcon = giftIcon
    self.isWeekStarGift = isWeekStarGift
    self.isSuperStarGift = isSuperStarGift
    self.giftCount = giftCount
    self.rank = rank
    self.gapnum = gapnum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.giftId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.giftName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.giftIcon = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.isWeekStarGift = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.isSuperStarGift = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.giftCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.rank = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.gapnum = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StarWeekGiftVO')
    if self.giftId is not None:
      oprot.writeFieldBegin('giftId', TType.I64, 1)
      oprot.writeI64(self.giftId)
      oprot.writeFieldEnd()
    if self.giftName is not None:
      oprot.writeFieldBegin('giftName', TType.STRING, 2)
      oprot.writeString(self.giftName)
      oprot.writeFieldEnd()
    if self.giftIcon is not None:
      oprot.writeFieldBegin('giftIcon', TType.STRING, 3)
      oprot.writeString(self.giftIcon)
      oprot.writeFieldEnd()
    if self.isWeekStarGift is not None:
      oprot.writeFieldBegin('isWeekStarGift', TType.I32, 4)
      oprot.writeI32(self.isWeekStarGift)
      oprot.writeFieldEnd()
    if self.isSuperStarGift is not None:
      oprot.writeFieldBegin('isSuperStarGift', TType.I32, 5)
      oprot.writeI32(self.isSuperStarGift)
      oprot.writeFieldEnd()
    if self.giftCount is not None:
      oprot.writeFieldBegin('giftCount', TType.I32, 6)
      oprot.writeI32(self.giftCount)
      oprot.writeFieldEnd()
    if self.rank is not None:
      oprot.writeFieldBegin('rank', TType.I32, 7)
      oprot.writeI32(self.rank)
      oprot.writeFieldEnd()
    if self.gapnum is not None:
      oprot.writeFieldBegin('gapnum', TType.I32, 8)
      oprot.writeI32(self.gapnum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.giftId)
    value = (value * 31) ^ hash(self.giftName)
    value = (value * 31) ^ hash(self.giftIcon)
    value = (value * 31) ^ hash(self.isWeekStarGift)
    value = (value * 31) ^ hash(self.isSuperStarGift)
    value = (value * 31) ^ hash(self.giftCount)
    value = (value * 31) ^ hash(self.rank)
    value = (value * 31) ^ hash(self.gapnum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuardStarVO:
  """
  Attributes:
   - kugouId
   - nickName
   - userLogo
   - isOnline
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.STRING, 'nickName', None, None, ), # 2
    (3, TType.STRING, 'userLogo', None, None, ), # 3
    (4, TType.I32, 'isOnline', None, None, ), # 4
  )

  def __init__(self, kugouId=None, nickName=None, userLogo=None, isOnline=None,):
    self.kugouId = kugouId
    self.nickName = nickName
    self.userLogo = userLogo
    self.isOnline = isOnline

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.nickName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.userLogo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.isOnline = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuardStarVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.nickName is not None:
      oprot.writeFieldBegin('nickName', TType.STRING, 2)
      oprot.writeString(self.nickName)
      oprot.writeFieldEnd()
    if self.userLogo is not None:
      oprot.writeFieldBegin('userLogo', TType.STRING, 3)
      oprot.writeString(self.userLogo)
      oprot.writeFieldEnd()
    if self.isOnline is not None:
      oprot.writeFieldBegin('isOnline', TType.I32, 4)
      oprot.writeI32(self.isOnline)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.nickName)
    value = (value * 31) ^ hash(self.userLogo)
    value = (value * 31) ^ hash(self.isOnline)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChartVO:
  """
  Attributes:
   - rank
   - userId
   - kugouId
   - userLogo
   - nickName
   - roomId
   - level
   - starIcon
   - levelName
   - cost
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'rank', None, None, ), # 1
    (2, TType.I64, 'userId', None, None, ), # 2
    (3, TType.I64, 'kugouId', None, None, ), # 3
    (4, TType.STRING, 'userLogo', None, None, ), # 4
    (5, TType.STRING, 'nickName', None, None, ), # 5
    (6, TType.I32, 'roomId', None, None, ), # 6
    (7, TType.I32, 'level', None, None, ), # 7
    (8, TType.STRING, 'starIcon', None, None, ), # 8
    (9, TType.STRING, 'levelName', None, None, ), # 9
    (10, TType.I64, 'cost', None, None, ), # 10
  )

  def __init__(self, rank=None, userId=None, kugouId=None, userLogo=None, nickName=None, roomId=None, level=None, starIcon=None, levelName=None, cost=None,):
    self.rank = rank
    self.userId = userId
    self.kugouId = kugouId
    self.userLogo = userLogo
    self.nickName = nickName
    self.roomId = roomId
    self.level = level
    self.starIcon = starIcon
    self.levelName = levelName
    self.cost = cost

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.rank = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.userLogo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.nickName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.roomId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.starIcon = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.levelName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.cost = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChartVO')
    if self.rank is not None:
      oprot.writeFieldBegin('rank', TType.I32, 1)
      oprot.writeI32(self.rank)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I64, 2)
      oprot.writeI64(self.userId)
      oprot.writeFieldEnd()
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 3)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.userLogo is not None:
      oprot.writeFieldBegin('userLogo', TType.STRING, 4)
      oprot.writeString(self.userLogo)
      oprot.writeFieldEnd()
    if self.nickName is not None:
      oprot.writeFieldBegin('nickName', TType.STRING, 5)
      oprot.writeString(self.nickName)
      oprot.writeFieldEnd()
    if self.roomId is not None:
      oprot.writeFieldBegin('roomId', TType.I32, 6)
      oprot.writeI32(self.roomId)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 7)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.starIcon is not None:
      oprot.writeFieldBegin('starIcon', TType.STRING, 8)
      oprot.writeString(self.starIcon)
      oprot.writeFieldEnd()
    if self.levelName is not None:
      oprot.writeFieldBegin('levelName', TType.STRING, 9)
      oprot.writeString(self.levelName)
      oprot.writeFieldEnd()
    if self.cost is not None:
      oprot.writeFieldBegin('cost', TType.I64, 10)
      oprot.writeI64(self.cost)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.rank)
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.userLogo)
    value = (value * 31) ^ hash(self.nickName)
    value = (value * 31) ^ hash(self.roomId)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.starIcon)
    value = (value * 31) ^ hash(self.levelName)
    value = (value * 31) ^ hash(self.cost)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
