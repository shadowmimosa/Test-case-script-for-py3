*** Settings ***
Library           Collections
Library           RequestsLibrary
Library           ../Lib/tools_library.py
Resource          http_request.txt
Library           HttpLibrary.HTTP
Library           String

*** Keywords ***
fx_mps_get_login_cookie
    [Arguments]    ${fxUrl}    ${username}    ${password}
    [Documentation]    该接口用户获取登录时所set的cookie（KuGoo），以便后续需要模拟登录时直接使用。
    ...
    ...    入参：referer、args（用户名，用户密码）
    ...
    ...    return value: ${resp.json()['data']['data']['kugouCookie']} \ #根据json结构，直接获取所需cookie
    ...
    ...
    ...
    ...    eg:
    ...    | fx_get_login_cookie \ | \ \ ${referer} \ | \ username| \ password |
    ${header}    create dictionary    referer=${fxUrl}
    ${paralist}    create dictionary    act=TestToolService.TestService    mtd=getLoginCookie    args=["${username}","${password}","1"]
    Create Session    fx    ${fxUrl}
    ${resp}=    Get Request    fx    Services.php    ${header}    ${paralist}
    ${cookie}    set variable    ${resp.json()['data']['data']['kugouCookie']}
    [Teardown]    Set Suite Variable    ${cookie}
    [Return]    ${cookie}

callback_token_KugooID
    [Arguments]    ${fxUrl}    ${username}    ${password}
    [Documentation]    断言：
    ...    1、从网站登录的cookie中获取返回kugouid和token值
    Evaluate    reload(sys)    sys
    Evaluate    sys.setdefaultencoding( "utf-8" )    sys
    ${cookie}    fx_mps_get_login_cookie    ${fxUrl}    ${username}    ${password}
    log    ${cookie}
    ${list}    Split String    ${cookie}    &
    ${KugooID_list}    create list
    ${t_list}    create list
    :FOR    ${string}    in    @{list}
    \    log    ${string}
    \    ${string_split}    split string    ${string}    =
    \    run keyword if    '${string_split[0]}'=='KugooID'    append to list    ${KugooID_list}    ${string_split[1]}
    \    log    ${KugooID_list}
    \    run keyword if    '${string_split[0]}'=='t'    append to list    ${t_list}    ${string_split[1]}
    \    log    ${t_list}
    log    ${KugooID_list[0]}
    log    ${t_list[0]}
    [return]     ${KugooID_list[0]}    ${t_list[0]}

fx_mps_get_cookie_by_login_api
    [Arguments]    ${username}    ${pwd}
    [Documentation]    调用大酷狗接口登录获取cookie，用于线上用例
    ${loginUrl}=    set variable    http://login.user.fxwork.cn/v1/login_by_pwd_cookie    #http://login.user.kgidc.cn/v1/login_by_pwd_cookie
    ${pwd}=    encrypt    ${pwd}    md5    32
    ${clientip}=    set variable    10.12.0.62
    ${clienttime}=    get time    epoch
    ${servertime}=    set variable    ${clienttime}
    ${serverid}=    set variable    1018
    ${serverkey}=    set variable    k3i4w8iUGOHeuw72kiuO837jd82jdo
    ${appkey}=    set variable    8e1d9C033dA9f2bA22F11165D9C7E
    ${key}=    encrypt    ${serverid}${serverkey}${servertime}    md5    32
    ${data}=    create dictionary    username    ${username}    pwd    ${pwd}    appid
    ...    1010
    set to dictionary    ${data}    clientip=${clientip}    clienttime=${clienttime}    expire_day=29
    set to dictionary    ${data}    serverid=${serverid}    servertime=${servertime}    key=${key}
    ${data}    evaluate    json.dumps(${data})    json
    log    ${data}
    ${len}=    get length    ${data}
    ${resp}=    post_request_general    ${loginUrl}    ${data}    Content-Type=application/json
    #    ${name}=    get json value    ${resp.content}    /data/name
    ${value}=    get json value    ${resp.content}    /data/value
    #    ${cookie}=    create dictionary    ${name}=${value}
    ${cookie}=    set variable    ${value}
    [Teardown]    Set Suite Variable    ${cookie}
    [Return]    ${cookie}

mps_ac_get_token
    [Arguments]    ${username}    ${pwd}
    #define
    ${clientTime}=    get time    epoch
    ${appid}=    set variable    1131
    ${clientver}=    set variable    7010
    ${mid}=    set variable    68c6551010a81d59247ccea8abe9e342a1b40f85
    ${appKey}=    set variable    4lu0l3cujt2KWIjcM374F8oX5N2lGY59
    ${loginUrl}=    set variable    http://login.user.kugou.com/v1/login_by_pwd    #http://login.user.fxwork.cn/v1/login_by_pwd
    ${key}=    encrypt    ${appid}${appKey}${clientver}${clientTime}    md5    32
    #define
    #data
    ${data}=    create dictionary    appid=${appid}    clientver=${clientver}    mid=${mid}
    set to dictionary    ${data}    clienttime=${clientTime}    key=${key}
    ${pwdmd5}=    encrypt    ${pwd}    md5    32
    ${pwddict}=    create dictionary    pwd=${pwdmd5}    clienttime=${clientTime}
    ${pwddict_json}=    evaluate    json.dumps(${pwddict})    json
    convert to string    ${pwddict_json}
    ${pwddict_ras}=    rsaEncrypt    ${pwddict_json}
    log    ${pwddict_ras}
    set to dictionary    ${data}    p=${pwddict_ras}    username=${username}
    ${data_json}=    evaluate    json.dumps(${data})    json
    convert to string    ${data_json}
    #data
    : FOR    ${index}    IN RANGE    5
    \    Log    第${index+1}次尝试获取token值
    \    ${resp}=    post_request_general    ${loginUrl}    ${data_json}    Content-Type=application/json
    \    log    ${resp.content}
    \    ${data}    get json value    ${resp.content}    /data
    \    ${erroCode}    get json value    ${resp.content}    /error_code
    \    Exit For Loop If    ${erroCode}==0
    \    Run Keyword If    ${erroCode}!=0 and ${index}==4    Pass Execution    获取token时,返回20006,接口验证失败，请检查!
    \    Run Keyword If    ${erroCode}!=0    Continue For Loop
    ${token}=    get json value    ${resp.content}    /data/token
    ${pid}=    get json value    ${resp.content}    /data/userid
    ${token}=    Replace String    ${token}    "    ${EMPTY}
    convert to string    ${pid}
    @{list}=    create list    ${token}    ${pid}
    [Return]    @{list}