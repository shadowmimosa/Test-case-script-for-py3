#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#
#_*_ coding:utf-8 _*_
from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import Services.usertype_dubbo.ttypes
import Services.startype_dubbo.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class MYQUERYTYPE:
  FOLLOW = 1
  MANAGER = 2
  HISTORY = 3
  GUARD = 4

  _VALUES_TO_NAMES = {
    1: "FOLLOW",
    2: "MANAGER",
    3: "HISTORY",
    4: "GUARD",
  }

  _NAMES_TO_VALUES = {
    "FOLLOW": 1,
    "MANAGER": 2,
    "HISTORY": 3,
    "GUARD": 4,
  }


class LivePromote:
  """
  Attributes:
   - upsMap
   - tops
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'upsMap', (TType.I64,None,TType.I64,None), None, ), # 1
    (2, TType.LIST, 'tops', (TType.I64,None), None, ), # 2
  )

  def __init__(self, upsMap=None, tops=None,):
    self.upsMap = upsMap
    self.tops = tops

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.upsMap = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readI64();
            _val6 = iprot.readI64();
            self.upsMap[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.tops = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI64();
            self.tops.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LivePromote')
    if self.upsMap is not None:
      oprot.writeFieldBegin('upsMap', TType.MAP, 1)
      oprot.writeMapBegin(TType.I64, TType.I64, len(self.upsMap))
      for kiter13,viter14 in self.upsMap.items():
        oprot.writeI64(kiter13)
        oprot.writeI64(viter14)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.tops is not None:
      oprot.writeFieldBegin('tops', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.tops))
      for iter15 in self.tops:
        oprot.writeI64(iter15)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.upsMap)
    value = (value * 31) ^ hash(self.tops)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HistoryLive:
  """
  Attributes:
   - showMap
   - artistIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'showMap', (TType.I32,None,TType.LIST,(TType.I64,None)), None, ), # 1
    (2, TType.LIST, 'artistIds', (TType.I64,None), None, ), # 2
  )

  def __init__(self, showMap=None, artistIds=None,):
    self.showMap = showMap
    self.artistIds = artistIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.showMap = {}
          (_ktype17, _vtype18, _size16 ) = iprot.readMapBegin()
          for _i20 in xrange(_size16):
            _key21 = iprot.readI32();
            _val22 = []
            (_etype26, _size23) = iprot.readListBegin()
            for _i27 in xrange(_size23):
              _elem28 = iprot.readI64();
              _val22.append(_elem28)
            iprot.readListEnd()
            self.showMap[_key21] = _val22
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.artistIds = []
          (_etype32, _size29) = iprot.readListBegin()
          for _i33 in xrange(_size29):
            _elem34 = iprot.readI64();
            self.artistIds.append(_elem34)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HistoryLive')
    if self.showMap is not None:
      oprot.writeFieldBegin('showMap', TType.MAP, 1)
      oprot.writeMapBegin(TType.I32, TType.LIST, len(self.showMap))
      for kiter35,viter36 in self.showMap.items():
        oprot.writeI32(kiter35)
        oprot.writeListBegin(TType.I64, len(viter36))
        for iter37 in viter36:
          oprot.writeI64(iter37)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.artistIds is not None:
      oprot.writeFieldBegin('artistIds', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.artistIds))
      for iter38 in self.artistIds:
        oprot.writeI64(iter38)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.showMap)
    value = (value * 31) ^ hash(self.artistIds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AreaInfo:
  """
  Attributes:
   - areaInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'areaInfo', (TType.I32,None,TType.LIST,(TType.STRUCT,(Services.usertype_dubbo.ttypes.UserApplyAreaVO, Services.usertype_dubbo.ttypes.UserApplyAreaVO.thrift_spec))), None, ), # 1
  )

  def __init__(self, areaInfo=None,):
    self.areaInfo = areaInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.areaInfo = {}
          (_ktype40, _vtype41, _size39 ) = iprot.readMapBegin()
          for _i43 in xrange(_size39):
            _key44 = iprot.readI32();
            _val45 = []
            (_etype49, _size46) = iprot.readListBegin()
            for _i50 in xrange(_size46):
              _elem51 = Services.usertype_dubbo.ttypes.UserApplyAreaVO()
              _elem51.read(iprot)
              _val45.append(_elem51)
            iprot.readListEnd()
            self.areaInfo[_key44] = _val45
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AreaInfo')
    if self.areaInfo is not None:
      oprot.writeFieldBegin('areaInfo', TType.MAP, 1)
      oprot.writeMapBegin(TType.I32, TType.LIST, len(self.areaInfo))
      for kiter52,viter53 in self.areaInfo.items():
        oprot.writeI32(kiter52)
        oprot.writeListBegin(TType.STRUCT, len(viter53))
        for iter54 in viter53:
          iter54.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.areaInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserInfo:
  """
  Attributes:
   - userId
   - userName
   - kugouId
   - nickName
   - userLogo
   - userLogoM
   - sex
   - coin
   - constellation
   - roomId
   - liveTimes
   - starLevel
   - richLevel
   - followCount
   - fansCount
   - messageCount
   - location
   - photoInfoList
   - status
   - vip
   - starCard
   - isLook
   - isGift
   - lastLiveTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.I64, 'kugouId', None, None, ), # 3
    (4, TType.STRING, 'nickName', None, None, ), # 4
    (5, TType.STRING, 'userLogo', None, None, ), # 5
    (6, TType.STRING, 'userLogoM', None, None, ), # 6
    (7, TType.I32, 'sex', None, None, ), # 7
    (8, TType.DOUBLE, 'coin', None, None, ), # 8
    (9, TType.I32, 'constellation', None, None, ), # 9
    (10, TType.I32, 'roomId', None, None, ), # 10
    (11, TType.STRING, 'liveTimes', None, None, ), # 11
    (12, TType.I32, 'starLevel', None, None, ), # 12
    (13, TType.I32, 'richLevel', None, None, ), # 13
    (14, TType.I32, 'followCount', None, None, ), # 14
    (15, TType.I32, 'fansCount', None, None, ), # 15
    (16, TType.I32, 'messageCount', None, None, ), # 16
    (17, TType.STRING, 'location', None, None, ), # 17
    (18, TType.LIST, 'photoInfoList', (TType.STRUCT,(Services.usertype_dubbo.ttypes.PhotoVO, Services.usertype_dubbo.ttypes.PhotoVO.thrift_spec)), None, ), # 18
    (19, TType.I32, 'status', None, None, ), # 19
    (20, TType.I32, 'vip', None, None, ), # 20
    (21, TType.I32, 'starCard', None, None, ), # 21
    (22, TType.I32, 'isLook', None, None, ), # 22
    (23, TType.I32, 'isGift', None, None, ), # 23
    (24, TType.I32, 'lastLiveTime', None, None, ), # 24
  )

  def __init__(self, userId=None, userName=None, kugouId=None, nickName=None, userLogo=None, userLogoM=None, sex=None, coin=None, constellation=None, roomId=None, liveTimes=None, starLevel=None, richLevel=None, followCount=None, fansCount=None, messageCount=None, location=None, photoInfoList=None, status=None, vip=None, starCard=None, isLook=None, isGift=None, lastLiveTime=None,):
    self.userId = userId
    self.userName = userName
    self.kugouId = kugouId
    self.nickName = nickName
    self.userLogo = userLogo
    self.userLogoM = userLogoM
    self.sex = sex
    self.coin = coin
    self.constellation = constellation
    self.roomId = roomId
    self.liveTimes = liveTimes
    self.starLevel = starLevel
    self.richLevel = richLevel
    self.followCount = followCount
    self.fansCount = fansCount
    self.messageCount = messageCount
    self.location = location
    self.photoInfoList = photoInfoList
    self.status = status
    self.vip = vip
    self.starCard = starCard
    self.isLook = isLook
    self.isGift = isGift
    self.lastLiveTime = lastLiveTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.nickName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.userLogo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.userLogoM = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.sex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.coin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.constellation = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.roomId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.liveTimes = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.starLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.richLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.followCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.fansCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.messageCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.location = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.LIST:
          self.photoInfoList = []
          (_etype58, _size55) = iprot.readListBegin()
          for _i59 in xrange(_size55):
            _elem60 = Services.usertype_dubbo.ttypes.PhotoVO()
            _elem60.read(iprot)
            self.photoInfoList.append(_elem60)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.vip = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.starCard = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.isLook = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.isGift = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.lastLiveTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserInfo')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I64, 1)
      oprot.writeI64(self.userId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 3)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.nickName is not None:
      oprot.writeFieldBegin('nickName', TType.STRING, 4)
      oprot.writeString(self.nickName)
      oprot.writeFieldEnd()
    if self.userLogo is not None:
      oprot.writeFieldBegin('userLogo', TType.STRING, 5)
      oprot.writeString(self.userLogo)
      oprot.writeFieldEnd()
    if self.userLogoM is not None:
      oprot.writeFieldBegin('userLogoM', TType.STRING, 6)
      oprot.writeString(self.userLogoM)
      oprot.writeFieldEnd()
    if self.sex is not None:
      oprot.writeFieldBegin('sex', TType.I32, 7)
      oprot.writeI32(self.sex)
      oprot.writeFieldEnd()
    if self.coin is not None:
      oprot.writeFieldBegin('coin', TType.DOUBLE, 8)
      oprot.writeDouble(self.coin)
      oprot.writeFieldEnd()
    if self.constellation is not None:
      oprot.writeFieldBegin('constellation', TType.I32, 9)
      oprot.writeI32(self.constellation)
      oprot.writeFieldEnd()
    if self.roomId is not None:
      oprot.writeFieldBegin('roomId', TType.I32, 10)
      oprot.writeI32(self.roomId)
      oprot.writeFieldEnd()
    if self.liveTimes is not None:
      oprot.writeFieldBegin('liveTimes', TType.STRING, 11)
      oprot.writeString(self.liveTimes)
      oprot.writeFieldEnd()
    if self.starLevel is not None:
      oprot.writeFieldBegin('starLevel', TType.I32, 12)
      oprot.writeI32(self.starLevel)
      oprot.writeFieldEnd()
    if self.richLevel is not None:
      oprot.writeFieldBegin('richLevel', TType.I32, 13)
      oprot.writeI32(self.richLevel)
      oprot.writeFieldEnd()
    if self.followCount is not None:
      oprot.writeFieldBegin('followCount', TType.I32, 14)
      oprot.writeI32(self.followCount)
      oprot.writeFieldEnd()
    if self.fansCount is not None:
      oprot.writeFieldBegin('fansCount', TType.I32, 15)
      oprot.writeI32(self.fansCount)
      oprot.writeFieldEnd()
    if self.messageCount is not None:
      oprot.writeFieldBegin('messageCount', TType.I32, 16)
      oprot.writeI32(self.messageCount)
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.STRING, 17)
      oprot.writeString(self.location)
      oprot.writeFieldEnd()
    if self.photoInfoList is not None:
      oprot.writeFieldBegin('photoInfoList', TType.LIST, 18)
      oprot.writeListBegin(TType.STRUCT, len(self.photoInfoList))
      for iter61 in self.photoInfoList:
        iter61.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 19)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.vip is not None:
      oprot.writeFieldBegin('vip', TType.I32, 20)
      oprot.writeI32(self.vip)
      oprot.writeFieldEnd()
    if self.starCard is not None:
      oprot.writeFieldBegin('starCard', TType.I32, 21)
      oprot.writeI32(self.starCard)
      oprot.writeFieldEnd()
    if self.isLook is not None:
      oprot.writeFieldBegin('isLook', TType.I32, 22)
      oprot.writeI32(self.isLook)
      oprot.writeFieldEnd()
    if self.isGift is not None:
      oprot.writeFieldBegin('isGift', TType.I32, 23)
      oprot.writeI32(self.isGift)
      oprot.writeFieldEnd()
    if self.lastLiveTime is not None:
      oprot.writeFieldBegin('lastLiveTime', TType.I32, 24)
      oprot.writeI32(self.lastLiveTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.nickName)
    value = (value * 31) ^ hash(self.userLogo)
    value = (value * 31) ^ hash(self.userLogoM)
    value = (value * 31) ^ hash(self.sex)
    value = (value * 31) ^ hash(self.coin)
    value = (value * 31) ^ hash(self.constellation)
    value = (value * 31) ^ hash(self.roomId)
    value = (value * 31) ^ hash(self.liveTimes)
    value = (value * 31) ^ hash(self.starLevel)
    value = (value * 31) ^ hash(self.richLevel)
    value = (value * 31) ^ hash(self.followCount)
    value = (value * 31) ^ hash(self.fansCount)
    value = (value * 31) ^ hash(self.messageCount)
    value = (value * 31) ^ hash(self.location)
    value = (value * 31) ^ hash(self.photoInfoList)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.vip)
    value = (value * 31) ^ hash(self.starCard)
    value = (value * 31) ^ hash(self.isLook)
    value = (value * 31) ^ hash(self.isGift)
    value = (value * 31) ^ hash(self.lastLiveTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LiveVO:
  """
  Attributes:
   - userId
   - roomId
   - nickname
   - imgPath
   - viewerNum
   - status
   - poster
   - starLevel
   - starName
   - addTime
   - roomUrl
   - livetime
   - comName
   - isAct
   - starttime
   - endTime
   - isExclusive
   - recPhotoPath
   - streamName
   - isHifi
   - tagList
   - starLevelIcon
   - sex
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userId', None, None, ), # 1
    (2, TType.I64, 'roomId', None, None, ), # 2
    (3, TType.STRING, 'nickname', None, None, ), # 3
    (4, TType.STRING, 'imgPath', None, None, ), # 4
    (5, TType.I32, 'viewerNum', None, None, ), # 5
    (6, TType.I32, 'status', None, None, ), # 6
    (7, TType.STRING, 'poster', None, None, ), # 7
    (8, TType.I32, 'starLevel', None, None, ), # 8
    (9, TType.STRING, 'starName', None, None, ), # 9
    (10, TType.I64, 'addTime', None, None, ), # 10
    (11, TType.STRING, 'roomUrl', None, None, ), # 11
    (12, TType.I64, 'livetime', None, None, ), # 12
    (13, TType.STRING, 'comName', None, None, ), # 13
    (14, TType.I32, 'isAct', None, None, ), # 14
    (15, TType.I64, 'starttime', None, None, ), # 15
    (16, TType.I64, 'endTime', None, None, ), # 16
    (17, TType.I32, 'isExclusive', None, None, ), # 17
    (18, TType.STRING, 'recPhotoPath', None, None, ), # 18
    (19, TType.STRING, 'streamName', None, None, ), # 19
    (20, TType.I32, 'isHifi', None, None, ), # 20
    (21, TType.LIST, 'tagList', (TType.STRUCT,(Services.startype_dubbo.ttypes.StarUserTagsVO, Services.startype_dubbo.ttypes.StarUserTagsVO.thrift_spec)), None, ), # 21
    (22, TType.STRING, 'starLevelIcon', None, None, ), # 22
    (23, TType.I32, 'sex', None, None, ), # 23
  )

  def __init__(self, userId=None, roomId=None, nickname=None, imgPath=None, viewerNum=None, status=None, poster=None, starLevel=None, starName=None, addTime=None, roomUrl=None, livetime=None, comName=None, isAct=None, starttime=None, endTime=None, isExclusive=None, recPhotoPath=None, streamName=None, isHifi=None, tagList=None, starLevelIcon=None, sex=None,):
    self.userId = userId
    self.roomId = roomId
    self.nickname = nickname
    self.imgPath = imgPath
    self.viewerNum = viewerNum
    self.status = status
    self.poster = poster
    self.starLevel = starLevel
    self.starName = starName
    self.addTime = addTime
    self.roomUrl = roomUrl
    self.livetime = livetime
    self.comName = comName
    self.isAct = isAct
    self.starttime = starttime
    self.endTime = endTime
    self.isExclusive = isExclusive
    self.recPhotoPath = recPhotoPath
    self.streamName = streamName
    self.isHifi = isHifi
    self.tagList = tagList
    self.starLevelIcon = starLevelIcon
    self.sex = sex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.roomId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.nickname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.imgPath = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.viewerNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.poster = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.starLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.starName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.addTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.roomUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.livetime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.comName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.isAct = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.starttime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I64:
          self.endTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.isExclusive = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.recPhotoPath = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.streamName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.isHifi = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.LIST:
          self.tagList = []
          (_etype65, _size62) = iprot.readListBegin()
          for _i66 in xrange(_size62):
            _elem67 = Services.startype_dubbo.ttypes.StarUserTagsVO()
            _elem67.read(iprot)
            self.tagList.append(_elem67)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.starLevelIcon = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.sex = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LiveVO')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I64, 1)
      oprot.writeI64(self.userId)
      oprot.writeFieldEnd()
    if self.roomId is not None:
      oprot.writeFieldBegin('roomId', TType.I64, 2)
      oprot.writeI64(self.roomId)
      oprot.writeFieldEnd()
    if self.nickname is not None:
      oprot.writeFieldBegin('nickname', TType.STRING, 3)
      oprot.writeString(self.nickname)
      oprot.writeFieldEnd()
    if self.imgPath is not None:
      oprot.writeFieldBegin('imgPath', TType.STRING, 4)
      oprot.writeString(self.imgPath)
      oprot.writeFieldEnd()
    if self.viewerNum is not None:
      oprot.writeFieldBegin('viewerNum', TType.I32, 5)
      oprot.writeI32(self.viewerNum)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 6)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.poster is not None:
      oprot.writeFieldBegin('poster', TType.STRING, 7)
      oprot.writeString(self.poster)
      oprot.writeFieldEnd()
    if self.starLevel is not None:
      oprot.writeFieldBegin('starLevel', TType.I32, 8)
      oprot.writeI32(self.starLevel)
      oprot.writeFieldEnd()
    if self.starName is not None:
      oprot.writeFieldBegin('starName', TType.STRING, 9)
      oprot.writeString(self.starName)
      oprot.writeFieldEnd()
    if self.addTime is not None:
      oprot.writeFieldBegin('addTime', TType.I64, 10)
      oprot.writeI64(self.addTime)
      oprot.writeFieldEnd()
    if self.roomUrl is not None:
      oprot.writeFieldBegin('roomUrl', TType.STRING, 11)
      oprot.writeString(self.roomUrl)
      oprot.writeFieldEnd()
    if self.livetime is not None:
      oprot.writeFieldBegin('livetime', TType.I64, 12)
      oprot.writeI64(self.livetime)
      oprot.writeFieldEnd()
    if self.comName is not None:
      oprot.writeFieldBegin('comName', TType.STRING, 13)
      oprot.writeString(self.comName)
      oprot.writeFieldEnd()
    if self.isAct is not None:
      oprot.writeFieldBegin('isAct', TType.I32, 14)
      oprot.writeI32(self.isAct)
      oprot.writeFieldEnd()
    if self.starttime is not None:
      oprot.writeFieldBegin('starttime', TType.I64, 15)
      oprot.writeI64(self.starttime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I64, 16)
      oprot.writeI64(self.endTime)
      oprot.writeFieldEnd()
    if self.isExclusive is not None:
      oprot.writeFieldBegin('isExclusive', TType.I32, 17)
      oprot.writeI32(self.isExclusive)
      oprot.writeFieldEnd()
    if self.recPhotoPath is not None:
      oprot.writeFieldBegin('recPhotoPath', TType.STRING, 18)
      oprot.writeString(self.recPhotoPath)
      oprot.writeFieldEnd()
    if self.streamName is not None:
      oprot.writeFieldBegin('streamName', TType.STRING, 19)
      oprot.writeString(self.streamName)
      oprot.writeFieldEnd()
    if self.isHifi is not None:
      oprot.writeFieldBegin('isHifi', TType.I32, 20)
      oprot.writeI32(self.isHifi)
      oprot.writeFieldEnd()
    if self.tagList is not None:
      oprot.writeFieldBegin('tagList', TType.LIST, 21)
      oprot.writeListBegin(TType.STRUCT, len(self.tagList))
      for iter68 in self.tagList:
        iter68.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.starLevelIcon is not None:
      oprot.writeFieldBegin('starLevelIcon', TType.STRING, 22)
      oprot.writeString(self.starLevelIcon)
      oprot.writeFieldEnd()
    if self.sex is not None:
      oprot.writeFieldBegin('sex', TType.I32, 23)
      oprot.writeI32(self.sex)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.roomId)
    value = (value * 31) ^ hash(self.nickname)
    value = (value * 31) ^ hash(self.imgPath)
    value = (value * 31) ^ hash(self.viewerNum)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.poster)
    value = (value * 31) ^ hash(self.starLevel)
    value = (value * 31) ^ hash(self.starName)
    value = (value * 31) ^ hash(self.addTime)
    value = (value * 31) ^ hash(self.roomUrl)
    value = (value * 31) ^ hash(self.livetime)
    value = (value * 31) ^ hash(self.comName)
    value = (value * 31) ^ hash(self.isAct)
    value = (value * 31) ^ hash(self.starttime)
    value = (value * 31) ^ hash(self.endTime)
    value = (value * 31) ^ hash(self.isExclusive)
    value = (value * 31) ^ hash(self.recPhotoPath)
    value = (value * 31) ^ hash(self.streamName)
    value = (value * 31) ^ hash(self.isHifi)
    value = (value * 31) ^ hash(self.tagList)
    value = (value * 31) ^ hash(self.starLevelIcon)
    value = (value * 31) ^ hash(self.sex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoomAboutMeStatistics:
  """
  Attributes:
   - onlineNum
   - totalNum
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'onlineNum', None, None, ), # 1
    (2, TType.I64, 'totalNum', None, None, ), # 2
  )

  def __init__(self, onlineNum=None, totalNum=None,):
    self.onlineNum = onlineNum
    self.totalNum = totalNum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.onlineNum = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.totalNum = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoomAboutMeStatistics')
    if self.onlineNum is not None:
      oprot.writeFieldBegin('onlineNum', TType.I64, 1)
      oprot.writeI64(self.onlineNum)
      oprot.writeFieldEnd()
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I64, 2)
      oprot.writeI64(self.totalNum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.onlineNum)
    value = (value * 31) ^ hash(self.totalNum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PageRoomAboutMe:
  """
  Attributes:
   - curPage
   - total
   - totalPage
   - pageNum
   - onlineNum
   - retData
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'curPage', None, None, ), # 1
    (2, TType.I32, 'total', None, None, ), # 2
    (3, TType.I32, 'totalPage', None, None, ), # 3
    (4, TType.I32, 'pageNum', None, None, ), # 4
    (5, TType.I32, 'onlineNum', None, None, ), # 5
    (6, TType.LIST, 'retData', (TType.STRUCT,(LiveVO, LiveVO.thrift_spec)), None, ), # 6
  )

  def __init__(self, curPage=None, total=None, totalPage=None, pageNum=None, onlineNum=None, retData=None,):
    self.curPage = curPage
    self.total = total
    self.totalPage = totalPage
    self.pageNum = pageNum
    self.onlineNum = onlineNum
    self.retData = retData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.curPage = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.totalPage = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pageNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.onlineNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.retData = []
          (_etype72, _size69) = iprot.readListBegin()
          for _i73 in xrange(_size69):
            _elem74 = LiveVO()
            _elem74.read(iprot)
            self.retData.append(_elem74)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PageRoomAboutMe')
    if self.curPage is not None:
      oprot.writeFieldBegin('curPage', TType.I32, 1)
      oprot.writeI32(self.curPage)
      oprot.writeFieldEnd()
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 2)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.totalPage is not None:
      oprot.writeFieldBegin('totalPage', TType.I32, 3)
      oprot.writeI32(self.totalPage)
      oprot.writeFieldEnd()
    if self.pageNum is not None:
      oprot.writeFieldBegin('pageNum', TType.I32, 4)
      oprot.writeI32(self.pageNum)
      oprot.writeFieldEnd()
    if self.onlineNum is not None:
      oprot.writeFieldBegin('onlineNum', TType.I32, 5)
      oprot.writeI32(self.onlineNum)
      oprot.writeFieldEnd()
    if self.retData is not None:
      oprot.writeFieldBegin('retData', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.retData))
      for iter75 in self.retData:
        iter75.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.curPage)
    value = (value * 31) ^ hash(self.total)
    value = (value * 31) ^ hash(self.totalPage)
    value = (value * 31) ^ hash(self.pageNum)
    value = (value * 31) ^ hash(self.onlineNum)
    value = (value * 31) ^ hash(self.retData)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
