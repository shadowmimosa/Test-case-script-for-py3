#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class RoomVO:
  """
  Attributes:
   - roomId
   - roomName
   - imgPath
   - auditStatus
   - banStatus
   - status
   - type
   - stream
   - category
   - kugouId
   - startTime
   - endTime
   - pauseTime
   - enterLimitNum
   - userId
   - actionType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'roomId', None, None, ), # 1
    (2, TType.STRING, 'roomName', None, None, ), # 2
    (3, TType.STRING, 'imgPath', None, None, ), # 3
    (4, TType.I32, 'auditStatus', None, None, ), # 4
    (5, TType.I32, 'banStatus', None, None, ), # 5
    (6, TType.I32, 'status', None, None, ), # 6
    (7, TType.I32, 'type', None, None, ), # 7
    (8, TType.STRING, 'stream', None, None, ), # 8
    (9, TType.I32, 'category', None, None, ), # 9
    (10, TType.I64, 'kugouId', None, None, ), # 10
    (11, TType.I32, 'startTime', None, None, ), # 11
    (12, TType.I32, 'endTime', None, None, ), # 12
    (13, TType.I32, 'pauseTime', None, None, ), # 13
    (14, TType.I32, 'enterLimitNum', None, None, ), # 14
    (15, TType.I64, 'userId', None, None, ), # 15
    (16, TType.I32, 'actionType', None, None, ), # 16
  )

  def __init__(self, roomId=None, roomName=None, imgPath=None, auditStatus=None, banStatus=None, status=None, type=None, stream=None, category=None, kugouId=None, startTime=None, endTime=None, pauseTime=None, enterLimitNum=None, userId=None, actionType=None,):
    self.roomId = roomId
    self.roomName = roomName
    self.imgPath = imgPath
    self.auditStatus = auditStatus
    self.banStatus = banStatus
    self.status = status
    self.type = type
    self.stream = stream
    self.category = category
    self.kugouId = kugouId
    self.startTime = startTime
    self.endTime = endTime
    self.pauseTime = pauseTime
    self.enterLimitNum = enterLimitNum
    self.userId = userId
    self.actionType = actionType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.roomId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.roomName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.imgPath = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.auditStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.banStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.stream = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.category = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.pauseTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.enterLimitNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.userId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.actionType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoomVO')
    if self.roomId is not None:
      oprot.writeFieldBegin('roomId', TType.I32, 1)
      oprot.writeI32(self.roomId)
      oprot.writeFieldEnd()
    if self.roomName is not None:
      oprot.writeFieldBegin('roomName', TType.STRING, 2)
      oprot.writeString(self.roomName)
      oprot.writeFieldEnd()
    if self.imgPath is not None:
      oprot.writeFieldBegin('imgPath', TType.STRING, 3)
      oprot.writeString(self.imgPath)
      oprot.writeFieldEnd()
    if self.auditStatus is not None:
      oprot.writeFieldBegin('auditStatus', TType.I32, 4)
      oprot.writeI32(self.auditStatus)
      oprot.writeFieldEnd()
    if self.banStatus is not None:
      oprot.writeFieldBegin('banStatus', TType.I32, 5)
      oprot.writeI32(self.banStatus)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 6)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 7)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.stream is not None:
      oprot.writeFieldBegin('stream', TType.STRING, 8)
      oprot.writeString(self.stream)
      oprot.writeFieldEnd()
    if self.category is not None:
      oprot.writeFieldBegin('category', TType.I32, 9)
      oprot.writeI32(self.category)
      oprot.writeFieldEnd()
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 10)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 11)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 12)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.pauseTime is not None:
      oprot.writeFieldBegin('pauseTime', TType.I32, 13)
      oprot.writeI32(self.pauseTime)
      oprot.writeFieldEnd()
    if self.enterLimitNum is not None:
      oprot.writeFieldBegin('enterLimitNum', TType.I32, 14)
      oprot.writeI32(self.enterLimitNum)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I64, 15)
      oprot.writeI64(self.userId)
      oprot.writeFieldEnd()
    if self.actionType is not None:
      oprot.writeFieldBegin('actionType', TType.I32, 16)
      oprot.writeI32(self.actionType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.roomId)
    value = (value * 31) ^ hash(self.roomName)
    value = (value * 31) ^ hash(self.imgPath)
    value = (value * 31) ^ hash(self.auditStatus)
    value = (value * 31) ^ hash(self.banStatus)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.stream)
    value = (value * 31) ^ hash(self.category)
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.startTime)
    value = (value * 31) ^ hash(self.endTime)
    value = (value * 31) ^ hash(self.pauseTime)
    value = (value * 31) ^ hash(self.enterLimitNum)
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.actionType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoomManagerVO:
  """
  Attributes:
   - kugouId
   - mkugouId
   - status
   - actionType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.I64, 'mkugouId', None, None, ), # 2
    (3, TType.I32, 'status', None, None, ), # 3
    (4, TType.I32, 'actionType', None, None, ), # 4
  )

  def __init__(self, kugouId=None, mkugouId=None, status=None, actionType=None,):
    self.kugouId = kugouId
    self.mkugouId = mkugouId
    self.status = status
    self.actionType = actionType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.mkugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.actionType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoomManagerVO')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.mkugouId is not None:
      oprot.writeFieldBegin('mkugouId', TType.I64, 2)
      oprot.writeI64(self.mkugouId)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 3)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.actionType is not None:
      oprot.writeFieldBegin('actionType', TType.I32, 4)
      oprot.writeI32(self.actionType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.mkugouId)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.actionType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoomSeatVO:
  """
  Attributes:
   - roomId
   - seatId
   - kugouId
   - cost
   - time
   - actionType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'roomId', None, None, ), # 1
    (2, TType.I32, 'seatId', None, None, ), # 2
    (3, TType.I64, 'kugouId', None, None, ), # 3
    (4, TType.I32, 'cost', None, None, ), # 4
    (5, TType.I32, 'time', None, None, ), # 5
    (6, TType.I32, 'actionType', None, None, ), # 6
  )

  def __init__(self, roomId=None, seatId=None, kugouId=None, cost=None, time=None, actionType=None,):
    self.roomId = roomId
    self.seatId = seatId
    self.kugouId = kugouId
    self.cost = cost
    self.time = time
    self.actionType = actionType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.roomId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.seatId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.cost = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.actionType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoomSeatVO')
    if self.roomId is not None:
      oprot.writeFieldBegin('roomId', TType.I32, 1)
      oprot.writeI32(self.roomId)
      oprot.writeFieldEnd()
    if self.seatId is not None:
      oprot.writeFieldBegin('seatId', TType.I32, 2)
      oprot.writeI32(self.seatId)
      oprot.writeFieldEnd()
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 3)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.cost is not None:
      oprot.writeFieldBegin('cost', TType.I32, 4)
      oprot.writeI32(self.cost)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I32, 5)
      oprot.writeI32(self.time)
      oprot.writeFieldEnd()
    if self.actionType is not None:
      oprot.writeFieldBegin('actionType', TType.I32, 6)
      oprot.writeI32(self.actionType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.roomId)
    value = (value * 31) ^ hash(self.seatId)
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.cost)
    value = (value * 31) ^ hash(self.time)
    value = (value * 31) ^ hash(self.actionType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoomIdType:
  """
  Attributes:
   - kugouId
   - roomId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'kugouId', None, None, ), # 1
    (2, TType.I32, 'roomId', None, None, ), # 2
  )

  def __init__(self, kugouId=None, roomId=None,):
    self.kugouId = kugouId
    self.roomId = roomId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.roomId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoomIdType')
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 1)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.roomId is not None:
      oprot.writeFieldBegin('roomId', TType.I32, 2)
      oprot.writeI32(self.roomId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.roomId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FocusAndroidVO:
  """
  Attributes:
   - focusId
   - addTime
   - title
   - url
   - image
   - userId
   - isTop
   - type
   - status
   - timeStart
   - timeEnd
   - pid
   - kugouId
   - isInterviewRoom
   - interviewRoomId
   - roomId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'focusId', None, None, ), # 1
    (2, TType.I32, 'addTime', None, None, ), # 2
    (3, TType.STRING, 'title', None, None, ), # 3
    (4, TType.STRING, 'url', None, None, ), # 4
    (5, TType.STRING, 'image', None, None, ), # 5
    (6, TType.I64, 'userId', None, None, ), # 6
    (7, TType.I32, 'isTop', None, None, ), # 7
    (8, TType.I32, 'type', None, None, ), # 8
    (9, TType.I32, 'status', None, None, ), # 9
    (10, TType.I32, 'timeStart', None, None, ), # 10
    (11, TType.I32, 'timeEnd', None, None, ), # 11
    (12, TType.STRING, 'pid', None, None, ), # 12
    (13, TType.I64, 'kugouId', None, None, ), # 13
    (14, TType.I32, 'isInterviewRoom', None, None, ), # 14
    (15, TType.I32, 'interviewRoomId', None, None, ), # 15
    (16, TType.I32, 'roomId', None, None, ), # 16
  )

  def __init__(self, focusId=None, addTime=None, title=None, url=None, image=None, userId=None, isTop=None, type=None, status=None, timeStart=None, timeEnd=None, pid=None, kugouId=None, isInterviewRoom=None, interviewRoomId=None, roomId=None,):
    self.focusId = focusId
    self.addTime = addTime
    self.title = title
    self.url = url
    self.image = image
    self.userId = userId
    self.isTop = isTop
    self.type = type
    self.status = status
    self.timeStart = timeStart
    self.timeEnd = timeEnd
    self.pid = pid
    self.kugouId = kugouId
    self.isInterviewRoom = isInterviewRoom
    self.interviewRoomId = interviewRoomId
    self.roomId = roomId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.focusId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.addTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.image = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.userId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.isTop = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.timeStart = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.timeEnd = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.pid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.isInterviewRoom = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.interviewRoomId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.roomId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FocusAndroidVO')
    if self.focusId is not None:
      oprot.writeFieldBegin('focusId', TType.I32, 1)
      oprot.writeI32(self.focusId)
      oprot.writeFieldEnd()
    if self.addTime is not None:
      oprot.writeFieldBegin('addTime', TType.I32, 2)
      oprot.writeI32(self.addTime)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 3)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 4)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.image is not None:
      oprot.writeFieldBegin('image', TType.STRING, 5)
      oprot.writeString(self.image)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I64, 6)
      oprot.writeI64(self.userId)
      oprot.writeFieldEnd()
    if self.isTop is not None:
      oprot.writeFieldBegin('isTop', TType.I32, 7)
      oprot.writeI32(self.isTop)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 8)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 9)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.timeStart is not None:
      oprot.writeFieldBegin('timeStart', TType.I32, 10)
      oprot.writeI32(self.timeStart)
      oprot.writeFieldEnd()
    if self.timeEnd is not None:
      oprot.writeFieldBegin('timeEnd', TType.I32, 11)
      oprot.writeI32(self.timeEnd)
      oprot.writeFieldEnd()
    if self.pid is not None:
      oprot.writeFieldBegin('pid', TType.STRING, 12)
      oprot.writeString(self.pid)
      oprot.writeFieldEnd()
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 13)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.isInterviewRoom is not None:
      oprot.writeFieldBegin('isInterviewRoom', TType.I32, 14)
      oprot.writeI32(self.isInterviewRoom)
      oprot.writeFieldEnd()
    if self.interviewRoomId is not None:
      oprot.writeFieldBegin('interviewRoomId', TType.I32, 15)
      oprot.writeI32(self.interviewRoomId)
      oprot.writeFieldEnd()
    if self.roomId is not None:
      oprot.writeFieldBegin('roomId', TType.I32, 16)
      oprot.writeI32(self.roomId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.focusId)
    value = (value * 31) ^ hash(self.addTime)
    value = (value * 31) ^ hash(self.title)
    value = (value * 31) ^ hash(self.url)
    value = (value * 31) ^ hash(self.image)
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.isTop)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.timeStart)
    value = (value * 31) ^ hash(self.timeEnd)
    value = (value * 31) ^ hash(self.pid)
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.isInterviewRoom)
    value = (value * 31) ^ hash(self.interviewRoomId)
    value = (value * 31) ^ hash(self.roomId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoomLoginLogVO:
  """
  Attributes:
   - loginTime
   - kugouId
   - roomId
   - ip
   - ua
   - starKugouId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'loginTime', None, None, ), # 1
    (2, TType.I64, 'kugouId', None, None, ), # 2
    (3, TType.I32, 'roomId', None, None, ), # 3
    (4, TType.STRING, 'ip', None, None, ), # 4
    (5, TType.STRING, 'ua', None, None, ), # 5
    (6, TType.I64, 'starKugouId', None, None, ), # 6
  )

  def __init__(self, loginTime=None, kugouId=None, roomId=None, ip=None, ua=None, starKugouId=None,):
    self.loginTime = loginTime
    self.kugouId = kugouId
    self.roomId = roomId
    self.ip = ip
    self.ua = ua
    self.starKugouId = starKugouId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.loginTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.kugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.roomId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.ua = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.starKugouId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoomLoginLogVO')
    if self.loginTime is not None:
      oprot.writeFieldBegin('loginTime', TType.I64, 1)
      oprot.writeI64(self.loginTime)
      oprot.writeFieldEnd()
    if self.kugouId is not None:
      oprot.writeFieldBegin('kugouId', TType.I64, 2)
      oprot.writeI64(self.kugouId)
      oprot.writeFieldEnd()
    if self.roomId is not None:
      oprot.writeFieldBegin('roomId', TType.I32, 3)
      oprot.writeI32(self.roomId)
      oprot.writeFieldEnd()
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 4)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.ua is not None:
      oprot.writeFieldBegin('ua', TType.STRING, 5)
      oprot.writeString(self.ua)
      oprot.writeFieldEnd()
    if self.starKugouId is not None:
      oprot.writeFieldBegin('starKugouId', TType.I64, 6)
      oprot.writeI64(self.starKugouId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.loginTime)
    value = (value * 31) ^ hash(self.kugouId)
    value = (value * 31) ^ hash(self.roomId)
    value = (value * 31) ^ hash(self.ip)
    value = (value * 31) ^ hash(self.ua)
    value = (value * 31) ^ hash(self.starKugouId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VmcInfoVO:
  """
  Attributes:
   - roomId
   - chatEnable
   - starEnable
   - giftEnable
   - idNum
   - recommendViewerCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'roomId', None, None, ), # 1
    (2, TType.I32, 'chatEnable', None, None, ), # 2
    (3, TType.I32, 'starEnable', None, None, ), # 3
    (4, TType.I32, 'giftEnable', None, None, ), # 4
    (5, TType.I32, 'idNum', None, None, ), # 5
    (6, TType.I32, 'recommendViewerCount', None, None, ), # 6
  )

  def __init__(self, roomId=None, chatEnable=None, starEnable=None, giftEnable=None, idNum=None, recommendViewerCount=None,):
    self.roomId = roomId
    self.chatEnable = chatEnable
    self.starEnable = starEnable
    self.giftEnable = giftEnable
    self.idNum = idNum
    self.recommendViewerCount = recommendViewerCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.roomId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.chatEnable = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.starEnable = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.giftEnable = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.idNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.recommendViewerCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VmcInfoVO')
    if self.roomId is not None:
      oprot.writeFieldBegin('roomId', TType.I32, 1)
      oprot.writeI32(self.roomId)
      oprot.writeFieldEnd()
    if self.chatEnable is not None:
      oprot.writeFieldBegin('chatEnable', TType.I32, 2)
      oprot.writeI32(self.chatEnable)
      oprot.writeFieldEnd()
    if self.starEnable is not None:
      oprot.writeFieldBegin('starEnable', TType.I32, 3)
      oprot.writeI32(self.starEnable)
      oprot.writeFieldEnd()
    if self.giftEnable is not None:
      oprot.writeFieldBegin('giftEnable', TType.I32, 4)
      oprot.writeI32(self.giftEnable)
      oprot.writeFieldEnd()
    if self.idNum is not None:
      oprot.writeFieldBegin('idNum', TType.I32, 5)
      oprot.writeI32(self.idNum)
      oprot.writeFieldEnd()
    if self.recommendViewerCount is not None:
      oprot.writeFieldBegin('recommendViewerCount', TType.I32, 6)
      oprot.writeI32(self.recommendViewerCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.roomId)
    value = (value * 31) ^ hash(self.chatEnable)
    value = (value * 31) ^ hash(self.starEnable)
    value = (value * 31) ^ hash(self.giftEnable)
    value = (value * 31) ^ hash(self.idNum)
    value = (value * 31) ^ hash(self.recommendViewerCount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoomManagerGuardVO:
  """
  Attributes:
   - roomManager
   - roomGuard
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'roomManager', None, None, ), # 1
    (2, TType.I32, 'roomGuard', None, None, ), # 2
  )

  def __init__(self, roomManager=None, roomGuard=None,):
    self.roomManager = roomManager
    self.roomGuard = roomGuard

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.roomManager = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.roomGuard = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoomManagerGuardVO')
    if self.roomManager is not None:
      oprot.writeFieldBegin('roomManager', TType.I32, 1)
      oprot.writeI32(self.roomManager)
      oprot.writeFieldEnd()
    if self.roomGuard is not None:
      oprot.writeFieldBegin('roomGuard', TType.I32, 2)
      oprot.writeI32(self.roomGuard)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.roomManager)
    value = (value * 31) ^ hash(self.roomGuard)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SendStarAndFollowVO:
  """
  Attributes:
   - sendStarCount
   - isFollow
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'sendStarCount', None, None, ), # 1
    (2, TType.I32, 'isFollow', None, None, ), # 2
  )

  def __init__(self, sendStarCount=None, isFollow=None,):
    self.sendStarCount = sendStarCount
    self.isFollow = isFollow

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.sendStarCount = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.isFollow = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SendStarAndFollowVO')
    if self.sendStarCount is not None:
      oprot.writeFieldBegin('sendStarCount', TType.I64, 1)
      oprot.writeI64(self.sendStarCount)
      oprot.writeFieldEnd()
    if self.isFollow is not None:
      oprot.writeFieldBegin('isFollow', TType.I32, 2)
      oprot.writeI32(self.isFollow)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sendStarCount)
    value = (value * 31) ^ hash(self.isFollow)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
