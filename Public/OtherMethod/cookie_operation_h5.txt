*** Settings ***
#Library    Collections
#Library    RequestsLibrary
Resource          http_request.txt
#Library     HttpLibrary.HTTP
#Library    String
Library            ../Lib/tools_library.py
Library            ../Usertool_01.py
*** Keywords ***
fx_get_login_cookie
    [Arguments]    ${referer}    ${username}    ${password}  ${fxUrl}
    [Documentation]    该接口用户获取登录时所set的cookie（KuGoo），以便后续需要模拟登录时直接使用。
    ...
    ...    入参：referer、args（用户名，用户密码）
    ...
    ...    return value: ${resp.json()['data']['data']['kugouCookie']} \ #根据json结构，直接获取所需cookie
    ...
    ...
    ...
    ...    eg:
    ...    | fx_get_login_cookie \ | \ \ ${referer} \ | \ username| \ password |
    ${header}    create dictionary    referer=${referer}
    ${paralist}    create dictionary    act=TestToolService.TestService    mtd=getLoginCookie    args=["${username}","${password}","1"]
    Create Session    fx    ${fxUrl}
    ${resp}=    Get Request    fx    Services.php    ${header}    ${paralist}
    ${cookie}    set variable    ${resp.json()['data']['data']['kugouCookie']}
    [Teardown]    Set Suite Variable    ${cookie}
    [Return]    ${cookie}

fx_get_login_notsuite_cookie
    [Arguments]    ${referer}    ${username}    ${password}   ${fxUrl}
    [Documentation]    该接口用户获取登录时所set的cookie（KuGoo），以便后续需要模拟登录时直接使用。
    ...
    ...    入参：referer、args（用户名，用户密码）
    ...
    ...    return value: ${resp.json()['data']['data']['kugouCookie']} \ #根据json结构，直接获取所需cookie
    ...
    ...
    ...
    ...    eg:
    ...    | fx_get_login_cookie \ | \ \ ${referer} \ | \ username| \ password |
    ${header}    create dictionary    referer=${referer}
    ${paralist}    create dictionary    act=TestToolService.TestService    mtd=getLoginCookie    args=["${username}","${password}","1"]
    Create Session    fx    ${fxUrl}
    ${resp}=    Get Request    fx    Services.php    ${header}    ${paralist}
    ${cookie}    set variable    ${resp.json()['data']['data']['kugouCookie']}
    [Teardown]
    [Return]    ${cookie}

fx_get_cookie_by_login_api
    [Arguments]    ${username}    ${pwd}
    [Documentation]    调用大酷狗接口登录获取cookie，用于线上用例
    ${loginUrl}=    set variable    http://login.user.fxwork.cn/v1/login_by_pwd_cookie    #http://login.user.kgidc.cn/v1/login_by_pwd_cookie
    ${pwd}=    encrypt    ${pwd}    md5    32
    ${clientip}=    set variable    10.12.0.62
    ${clienttime}=    get time    epoch
    ${servertime}=    set variable    ${clienttime}
    ${serverid}=    set variable    1018
    ${serverkey}=    set variable    k3i4w8iUGOHeuw72kiuO837jd82jdo
    ${appkey}=    set variable    8e1d9C033dA9f2bA22F11165D9C7E
    ${key}=    encrypt    ${serverid}${serverkey}${servertime}    md5    32
    ${data}=    create dictionary    username    ${username}    pwd    ${pwd}    appid
    ...    1010
    set to dictionary    ${data}    clientip=${clientip}    clienttime=${clienttime}    expire_day=29
    set to dictionary    ${data}    serverid=${serverid}    servertime=${servertime}    key=${key}
    ${data}    evaluate    json.dumps(${data})    json
    log    ${data}
    ${len}=    get length    ${data}
    ${resp}=    post_request_general    ${loginUrl}    ${data}    Content-Type=application/json
    #    ${name}=    get json value    ${resp.content}    /data/name
    ${value}=    get json value    ${resp.content}    /data/value
    #    ${cookie}=    create dictionary    ${name}=${value}
    ${cookie}=    set variable    ${value}
    [Teardown]    Set Suite Variable    ${cookie}
    [Return]    ${cookie}

ac_get_token_h5
    [Arguments]    ${username}    ${pwd}
    #define
    #定义H5项目，新的登录接口，获取_uid、_ticket
    ${clientTime}=    get time    epoch
    ${loginUrl}=    set variable    http://test.mofx.kugou.net/mfx/h5/api/login
    ${partnerid}    set variable    0
    ${password}    encrypt    ${pwd}    md5    32
    ${data}=    create dictionary    partnerid    ${partnerid}    username    ${username}    password
    ...    ${password}
    # ${data_json}=    evaluate    json.dumps(${data})    json
    # convert to string    ${data_json}
    #定义H5 ,密钥Key值，如果字符串首字符用#号，需要使用\进行转义
    ${keybase}    set variable    \#FX_md5*!
    ${_t}    get time    epoch
    ${_t}    evaluate    int(${_t}*1000)
    ${fx-t}    evaluate    str(${_t})
    set to dictionary    ${data}    fx-t=${fx-t}
    #将入参中的Value值取出
    ${values}    evaluate    ${data}.values()
    #将取出的Value值进行排序
    ${signparam}=    evaluate    sorted(${values})

    ${signparam}=    convert to string    ${signparam}

    ${signparam}=    Replace String    ${signparam}    [    ${EMPTY}
    ${signparam}=    Replace String    ${signparam}    u'    ${EMPTY}
    ${signparam}=    Replace String    ${signparam}    ',    ${EMPTY}
    ${signparam}=    Replace String    ${signparam}    ]    ${EMPTY}
    ${signparam}=    Replace String    ${signparam}    "    ${EMPTY}
    ${signparam}=    Replace String    ${signparam}    "    ${EMPTY}
    ${signparam}=    Replace String    ${signparam}    '    ${EMPTY}
    ${signparam}=    Replace String    ${signparam}    ${SPACE}    ${EMPTY}

    #拼接需要加密的字符串
    ${md5param}    set variable    ${signparam}${keybase}${fx-t}
    log    ${md5param}

    #MD5加密
    ${fx-p}=    encrypt    ${md5param}    md5    32
    ${resp}=    post_request_general    ${loginUrl}    ${data}    Content-Type=application/x-www-form-urlencoded;fx-p=${fx-p}
    log    调用新登录接口
    log    ${resp.content}
    log    ${resp.headers}
    #将header输出
    ${resp.headers}    evaluate    json.dumps(${resp.headers})    json
    log json    ${resp.headers}
    #获取有效的JSON串
    ${json_content}    getH5JsonData    ${resp.content}
    ${json_content}    evaluate    json.dumps(${json_content})    json
    log json    ${json_content}
    #从响应体获取ticket值
    ${ticket}    get json value    ${json_content}    /data/ticket

    ${set_Cookie}    get json value    ${resp.headers}    /Set-Cookie
    @{set_Cookie_list}    evaluate    ${set_Cookie}.split(";")
    ${set_Cookie_list_len}    evaluate    len(${set_Cookie_list})
    #判断指定字符串是符在cookie字符集当中
    : FOR    ${index}    IN    @{set_Cookie_list}
    \    Log    ${index}
    \    ${uid}    run keyword if    'fx-uid' in '${index}'    set variable    ${index}    ELSE    Continue For Loop
    \    ${ticket}    run keyword if    'fx-ticket' in '${index}'    set variable    ${index}    ELSE    Continue For Loop
    log    输出从Cookie中的取值
    log    ${uid}
    log    ${ticket}
    @{uid}    evaluate    '${uid}'.split("=")
    : FOR    ${index}    IN    @{uid}
    \    Log    ${index}
    \    ${uid}    run keyword if    'fx-uid'!='${index}'    set variable    ${index}
    log    经过处理后，输出从Cookie中取出期望的uid及ticket值
    log    ${uid}
    log    ${ticket}

    [Return]    ${ticket}    ${uid}
